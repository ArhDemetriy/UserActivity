{"version":3,"sources":["api/FirebaseController/Firebase/init.ts","api/FirebaseController/Firebase.ts","api/FirebaseController.ts","redux/store/reducer/grafReducer.ts","redux/store/reducer/userReducer.ts","redux/store/reducer.ts","redux/store.ts","redux/actions/UserActions.ts","redux/store/reducer/userReducer/createData.ts","controller/Engine/getters.ts","controller/Validate.ts","controller/Engine.ts","controller/Engine/converters.ts","app/Controls/EventHandlers/AddUser.ts","redux/actions/GraphActions.ts","controller/Histogram.ts","controller/Retention.ts","app/Controls/EventHandlers/Calculate.ts","app/Controls/Controls.tsx","app/Controls/EventHandlers/Save.ts","app/Graph/Histogram/HistogramSVG/HistogramSVG.tsx","app/Graph/Histogram/Histogram.tsx","app/Graph/Retention/Metrics.tsx","app/Graph/Graph.tsx","app/Table/User/eventHandlers/updateUser.ts","app/Table/User/User.tsx","app/Table/Table.tsx","app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","selfFirestore","getFirestore","Firebase","collectionName","this","collections","has","set","firestore","get","collection","data","getCollection","id","getFirestoreDocs","then","result","docs","map","doc","ref","docRefs","forEach","Map","USERS","FirebaseController","getDocs","bdUsers","sort","a","b","deleteCollection","Promise","all","bdUser","add","REPLACE_HISTOGRAM","REPLACE_SPLINE","REPLACE_METRICS","SET_RETENTION","grafReducer","graph","action","type","payload","histogram","spline","undefined","retention","metrics","ADD_USERS","REPLACE_USERS","userReducer","users","concat","defaultState","NaN","bins","maxBin","average","median","percentile10","percentile90","reducer","state","store","createStore","UserActions","dispatch","user","to","getState","i","Number","isFinite","length","temp","index","splice","createData","status","getUsers","Validate","validateAllIds","force","tester","allValid","push","invalidIndexes","Set","Object","values","filter","indexes","needUpdate","validateUsers","isValid","updateValidStatusIn","replaceUsers","from","every","updateUser","_","validateUserDate","registration","lastActivity","getTime","now","Date","lastActivityIsValid","registrationIsValid","mutableUser","keys","key","Engine","safetyLoad","validate","Error","reduxUsers","reduxUser","saveAll","separatePromise","load","convertToReduxUsers","tryLoad","catch","e","console","error","callback","timeout","resolve","setTimeout","addUser","Array","isArray","lastId","newUser","getDefaultUser","addUsers","setFullYear","getFullYear","getMonth","getDate","GraphActions","binsSlice","Histogram","calcMetrics","calcHistogram","bind","calcSpline","rawBins","getBinLifeTimes","Math","max","normTo1","replaceHistogram","lives","getLifeDays","d","round","biggestLife","fill","raw","k","n","lifeDays","getAverage","getMedian","getPercentile","replaceMetrics","lifeTimes","reduce","p","c","sortedLifeTimes","floor","percent","percentIndex","min","ceil","getHistogram","points","replaceSpline","Retention","retention7","getRollingRetention","setRetention","days","intervalTime","floorTime","getIntervalTime","returns","news","DAY","time","calculate","calcRetention","calcAll","Controls","usersIsExists","useSelector","useState","loading","setLoading","className","onClick","disabled","event","trySave","finally","HistogramSVG","height","reduxMaxBin","reduxBins","mainHeight","PADDING","maxHeight","mainWidth","getText","x","BAR_WIDTH","y","textAnchor","width","textRendering","version","xmlns","half","yTop","yMiddle","yBottom","stroke","x1","x2","y1","y2","getYScale","bin","histogramIsExists","Metrics","toFixed","Graph","getUpdateUserHandler","converter","validator","reverseConverter","getNumber","validateUserId","value","getDateFromHTML","getHTMLDate","changeCallback","target","date","split","dateValues","trim","parseInt","newDate","toString","padStart","User","requireCssClass","reduxId","setId","idIsValid","reduxRegistration","setRegistration","reduxLastActivity","setLastActivity","mainClass","name","step","onChange","onBlur","newValue","size","deleteUser","src","alt","Table","scope","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","init","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3a19b693.chunk.js","sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\n\r\nexport const app = initializeApp({\r\n    apiKey: \"AIzaSyAy2GjQAfutCFa3toa9WLDFTkMehtj_CNk\",\r\n    authDomain: \"useractivity-4c085.firebaseapp.com\",\r\n    projectId: \"useractivity-4c085\",\r\n    storageBucket: \"useractivity-4c085.appspot.com\",\r\n    messagingSenderId: \"1007647890248\",\r\n    appId: \"1:1007647890248:web:91e91fec7ca033ae29b17d\"\r\n})\r\n\r\nexport const selfFirestore = getFirestore(app)\r\n\r\n","import * as firestore from \"firebase/firestore\";\r\nimport { DocumentData } from \"firebase/firestore\";\r\nimport { selfFirestore } from \"./Firebase/init\";\r\n\r\nexport class Firebase{\r\n    // private static readonly app = app\r\n\r\n    private static readonly selfFirestore = selfFirestore\r\n    public static readonly firestore = firestore\r\n\r\n    private static readonly collections: Map<string, ReturnType<typeof firestore['collection']>> = new Map()\r\n    protected static getCollection(collectionName: string) {\r\n        if (!this.collections.has(collectionName)) {\r\n            this.collections.set(collectionName, firestore.collection(this.selfFirestore, collectionName))\r\n        }\r\n        return this.collections.get(collectionName)!\r\n    }\r\n\r\n    public static add<T extends Record<string, number | string>>(collection: string, data: T) {\r\n        return firestore.addDoc(this.getCollection(collection), data)\r\n    }\r\n\r\n    protected static getFirestoreDocs(collection: string) {\r\n        return firestore.getDocs(firestore.collectionGroup(this.selfFirestore, this.getCollection(collection).id))\r\n    }\r\n\r\n    /** получает все документы коллекции, затем их все удаляет */\r\n    public static deleteCollection(collection: string) {\r\n        return this.getFirestoreDocs(collection)\r\n        .then(result => result.docs.map(doc => doc.ref))\r\n        .then(docRefs => docRefs.forEach(ref => firestore.deleteDoc(ref)))\r\n    }\r\n\r\n    /** возвращает все документы коллекции */\r\n    public static getDocs<T extends DocumentData = DocumentData>(collection: string) {\r\n        return this.getFirestoreDocs(collection)\r\n            .then(result => result.docs\r\n                .map(doc => doc.data() as T)\r\n            )\r\n    }\r\n}\r\n\r\n","import { TBdUsers } from \"../types/reactComponents/basic\";\r\nimport { Firebase } from \"./FirebaseController/Firebase\";\r\n\r\nconst USERS = 'users'\r\n\r\nexport class FirebaseController{\r\n    /** загружает и возвращает данные из коллекции users */\r\n    public static load() {\r\n        return Firebase.getDocs<TBdUsers[0]>(USERS)\r\n            .then(bdUsers => bdUsers.sort((a, b) => a.id - b.id))\r\n    }\r\n\r\n    /** очищает коллекцию users и сохраняет в неё переданный массив */\r\n    public static saveAll(bdUsers: TBdUsers) {\r\n        return Firebase.deleteCollection(USERS)\r\n            .then(() => Promise.all(bdUsers\r\n                .map(bdUser => Firebase.add(USERS, bdUser))))\r\n    }\r\n}\r\n","import { TAction, TDefaultAction } from \"../reducer\"\r\n\r\nexport const REPLACE_HISTOGRAM = 'REPLACE_HISTOGRAM'\r\nexport const REPLACE_SPLINE = 'REPLACE_SPLINE'\r\nexport const REPLACE_METRICS = 'REPLACE_METRICS'\r\nexport const SET_RETENTION = 'SET_RETENTION'\r\n\r\nexport function grafReducer(graph: TGraph, action: TAction): TGraph {\r\n\r\n    if (action.type === REPLACE_HISTOGRAM && action.payload.histogram ) {\r\n        return { ...graph, histogram: { ...graph.histogram, ...action.payload.histogram } }\r\n    } else if (action.type === REPLACE_SPLINE && action.payload.spline) {\r\n        return { ...graph, spline: action.payload.spline }\r\n    } else if (action.type === SET_RETENTION && action.payload.retention !== undefined) {\r\n        return { ...graph, retention: +action.payload.retention }\r\n    } else if (action.type === REPLACE_METRICS && action.payload.metrics !== undefined) {\r\n        return { ...graph, metrics: { ...action.payload.metrics } }\r\n    }\r\n\r\n    return graph\r\n}\r\n\r\nexport type TGraph = {\r\n    retention: number\r\n    /** высоты столбцов гистограмы */\r\n    histogram: {\r\n        /** нормированные к 1 высоты столбцов гистограмы */\r\n        bins: number[]\r\n        /** высота максимального не нормированного столбца */\r\n        maxBin: number\r\n    }\r\n    /** точки сшивки кривых безье */\r\n    spline: number[]\r\n    /** базовые метрики */\r\n    metrics: {\r\n        average: number\r\n        median: number\r\n        percentile10: number\r\n        percentile90: number\r\n    }\r\n}\r\n\r\nexport interface TGrafReducerAction extends TDefaultAction {\r\n    type: typeof REPLACE_HISTOGRAM | typeof REPLACE_SPLINE | typeof SET_RETENTION | typeof REPLACE_METRICS\r\n    payload: Partial<TGraph>\r\n}\r\n\r\nexport default grafReducer\r\n","import { TAction, TDefaultAction } from \"../reducer\"\r\nimport { TUsers } from \"./userReducer/userReducer\"\r\n\r\nexport const ADD_USERS = 'ADD_USERS'\r\nexport const REPLACE_USERS = 'REPLACE_USERS'\r\n\r\nexport function userReducer(users: TUsers, action: TAction) {\r\n    if (action.type === ADD_USERS) {\r\n        return users.concat(action.payload.users)\r\n    } else if (action.type === REPLACE_USERS) {\r\n        return [...action.payload.users]\r\n    }\r\n    return users\r\n}\r\n\r\n/** поле в redux. Это не просто массив. Если нужен массив пользователей используй TUser[] */\r\n\r\nexport interface TUserReducerAction extends TDefaultAction {\r\n    type: typeof ADD_USERS | typeof REPLACE_USERS\r\n    payload: {\r\n        users: TUsers\r\n    }\r\n}\r\n\r\nexport default userReducer\r\n","import { Reducer } from \"redux\"\r\nimport { grafReducer, TGrafReducerAction, TGraph } from \"./reducer/grafReducer\"\r\nimport { TUserReducerAction, userReducer } from \"./reducer/userReducer\"\r\nimport { TUsers } from \"./reducer/userReducer/userReducer\"\r\n\r\nexport interface TDefaultAction {\r\n    type: string\r\n    payload?: Record<string, any>\r\n}\r\n\r\nexport type TAction =\r\n    | TUserReducerAction\r\n    | TGrafReducerAction\r\n\r\nexport type TState = {\r\n    /** массив юзеров для таблицы */\r\n    users: TUsers\r\n    /** данные для отображения графиков */\r\n    graph: TGraph\r\n}\r\n\r\nconst defaultState: TState = {\r\n    users: [],\r\n    graph: {\r\n        retention: NaN,\r\n        histogram: {\r\n            bins: [],\r\n            maxBin: NaN,\r\n        },\r\n        spline: [],\r\n        metrics: {\r\n            average: NaN,\r\n            median: NaN,\r\n            percentile10: NaN,\r\n            percentile90: NaN,\r\n        },\r\n    },\r\n}\r\n\r\nexport const reducer: Reducer<TState, TAction> = (state = defaultState, action) => {\r\n    return {\r\n        ...state,\r\n        users: userReducer(state.users, action),\r\n        graph: grafReducer(state.graph, action),\r\n    }\r\n}\r\n\r\nexport default reducer\r\n","import { createStore } from \"redux\";\r\nimport reducer from \"./store/reducer\";\r\n\r\nexport const store = createStore(reducer);\r\n\r\nexport default store\r\n","import { store } from \"../store\";\r\nimport { ADD_USERS, REPLACE_USERS, TUserReducerAction } from \"../store/reducer/userReducer\";\r\nimport { TUser } from \"../store/reducer/userReducer/userReducer\";\r\n\r\nexport class UserActions {\r\n    static addUsers(users: TUserReducerAction['payload']['users']) {\r\n        store.dispatch({\r\n            type: ADD_USERS,\r\n            payload: {\r\n                users\r\n            },\r\n        })\r\n    }\r\n\r\n    /** можно указывать индес выходящий за границы массива */\r\n    static updateUser(user: Partial<TUser>, to: number) {\r\n        const users = store.getState().users\r\n\r\n        let i = to\r\n        if (!Number.isFinite(to) || to < 0) {\r\n            i = 0\r\n        } else if (to > users.length - 1) {\r\n            i = users.length - 1\r\n        }\r\n\r\n        const temp = users[i]\r\n        users[i] = { ...temp, ...user }\r\n        store.dispatch({\r\n            type: REPLACE_USERS,\r\n            payload: {\r\n                users\r\n            },\r\n        })\r\n    }\r\n\r\n    static replaceUsers(users: TUserReducerAction['payload']['users']) {\r\n        store.dispatch({\r\n            type: REPLACE_USERS,\r\n            payload: {\r\n                users\r\n            },\r\n        })\r\n    }\r\n\r\n    static deleteUser(index: number) {\r\n        const users = store.getState().users\r\n        users.splice(index, 1)\r\n\r\n        store.dispatch({\r\n            type: REPLACE_USERS,\r\n            payload: {\r\n                users\r\n            },\r\n        })\r\n    }\r\n\r\n}\r\n","import { TData, TDataStatus } from \"./userReducer\";\r\n\r\n/** возвращает новый объект созданный по шаблону необходимому для TUsers в редаксе */\r\nexport function createData<T>(data: T, status: TDataStatus): TData<T> {\r\n    return {\r\n        data,\r\n        status,\r\n    }\r\n}\r\n","import { store } from \"../../redux/store\";\r\n\r\nexport function getUsers() {\r\n    return store.getState().users\r\n}\r\n\r\nexport function getHistogram() {\r\n    return store.getState().graph?.histogram\r\n}\r\n","import { UserActions } from \"../redux/actions/UserActions\"\r\nimport { TData, TUser } from \"../redux/store/reducer/userReducer/userReducer\"\r\nimport { getUsers } from \"./Engine/getters\"\r\n\r\nexport class Validate {\r\n    public static validate() {\r\n        // const users = getUsers()\r\n        const idValidate = this.validateAllIds()\r\n\r\n        return idValidate\r\n    }\r\n\r\n    /**\r\n     * Проверка уникальности id всех юзеров.\r\n     * Обновляет редакс при необходимости.\r\n     */\r\n    public static validateAllIds(force = true) {\r\n        const users = getUsers()\r\n\r\n        /** { [id] : ArrayOfIndexes } */\r\n        const tester: { [k in number]: number[] } = {}\r\n\r\n        // загоняем в tester количество вхождений каждого id.\r\n        let allValid = true\r\n        users.forEach((user, index) => {\r\n            if (user.id.status === 'loading') { return }\r\n\r\n            const id = user.id.data\r\n            if (!tester[id]?.length) {\r\n                tester[id] =  [index]\r\n            } else {\r\n                tester[id].push(index)\r\n                allValid = false\r\n            }\r\n        })\r\n\r\n        const invalidIndexes = new Set(([] as number[])\r\n            .concat(...Object.values(tester)\r\n                .filter(indexes => indexes.length > 1)))\r\n\r\n        // проставление статусов\r\n        let needUpdate = false\r\n        const validateUsers = users.map(user => {\r\n            if (!force && user.id.status === 'valid') { return user }\r\n            if (user.id.status === 'loading') { return user }\r\n\r\n            const isValid = !invalidIndexes.has(user.id.data)\r\n\r\n            if (this.updateValidStatusIn(user, {\r\n                id: { status: isValid ? 'valid' : 'invalid' },\r\n            })) {\r\n                needUpdate = true\r\n                // пересоздание для обновления хука в User.tsx\r\n                return { ...user }\r\n            }\r\n\r\n            return user\r\n        })\r\n\r\n        if (needUpdate) {\r\n            UserActions.replaceUsers(validateUsers)\r\n        }\r\n\r\n        return allValid\r\n    }\r\n\r\n    public static validateUserId(from: number) {\r\n        const users = getUsers()\r\n        const user = users[from]\r\n        if (!user?.id) { return false }\r\n        const id = user.id.data\r\n\r\n        let isValid = true\r\n        if (!Number.isFinite(id)) {\r\n            isValid = false\r\n        } else {\r\n            isValid = users.every((user, i) => id !== user.id.data || from === i)\r\n        }\r\n\r\n        if (this.updateValidStatusIn(user, {\r\n            id: { status: isValid ? 'valid' : 'invalid' },\r\n        })) {\r\n            UserActions.updateUser(user, from)\r\n        }\r\n\r\n        return isValid\r\n    }\r\n\r\n    /**\r\n     * проверяет даты всех пользователей, вызывая индивидуальную проверку для каждого.\r\n     * часто дёргает редакс.\r\n     */\r\n    public static validateAllDate() {\r\n        let allValid = true\r\n        const users = getUsers()\r\n        users.forEach((_, i) => { allValid = this.validateUserDate(i) && allValid })\r\n        return allValid\r\n    }\r\n\r\n    public static validateUserDate(from: number) {\r\n        const user = getUsers()[from]\r\n        if (!user?.registration || !user?.lastActivity) { return false }\r\n\r\n        const lastActivity = user.lastActivity.data?.getTime && user.lastActivity.data.getTime()\r\n        const registration = user.registration.data?.getTime && user.registration.data.getTime()\r\n        const now = Date.now()\r\n\r\n        const lastActivityIsValid =  lastActivity < now\r\n\r\n        let registrationIsValid = true\r\n        if (lastActivityIsValid) {\r\n            registrationIsValid = registration <= lastActivity\r\n        } else {\r\n            registrationIsValid = registration < now\r\n        }\r\n\r\n        if (this.updateValidStatusIn(user, {\r\n            lastActivity: { status: lastActivityIsValid ? 'valid' : 'invalid' },\r\n            registration: { status: registrationIsValid ? 'valid' : 'invalid' },\r\n        })) {\r\n            UserActions.updateUser(user, from)\r\n        }\r\n\r\n        return lastActivityIsValid && registrationIsValid\r\n    }\r\n\r\n    /** мутирует статусы в переданном объекте.\r\n     * @param mutableUser объект в котором, при необходимости, мутируются статусы\r\n     * @param status объект со статусами которые должны быть в mutableUser\r\n     * @returns были-ли изменены статусы\r\n     */\r\n    protected static updateValidStatusIn<T extends Record<string, Pick<TData<any>, 'status'>>>(mutableUser: T, status: Partial<Record<keyof T, Pick<TData<any>, 'status'>>>) {\r\n        let needUpdate = false\r\n\r\n        for (const key of Object.keys(status)) {\r\n            if (mutableUser[key as keyof TUser].status !== status[key as keyof TUser]!.status) {\r\n                mutableUser[key as keyof TUser].status = status[key as keyof TUser]!.status\r\n                needUpdate = true\r\n            }\r\n        }\r\n\r\n        return needUpdate\r\n    }\r\n}\r\n","import { FirebaseController } from \"../api/FirebaseController\";\r\nimport { UserActions } from \"../redux/actions/UserActions\";\r\nimport { convertToBdUsers, convertToReduxUsers } from \"./Engine/converters\";\r\nimport { getUsers } from \"./Engine/getters\";\r\nimport { Validate } from \"./Validate\";\r\n\r\nexport class Engine{\r\n    public static init() {\r\n        return this.safetyLoad()\r\n    }\r\n\r\n    public static validate() {\r\n        return Validate.validate()\r\n    }\r\n\r\n    public static async trySave() {\r\n        if (!this.validate()) { throw new Error(\"invalid users data\") }\r\n\r\n        const bdUsers = convertToBdUsers(getUsers())\r\n        return FirebaseController.saveAll(bdUsers)\r\n    }\r\n\r\n    public static tryLoad() {\r\n        return this.separatePromise(() => FirebaseController.load())\r\n            .then(bdUsers => this.separatePromise(() => convertToReduxUsers(bdUsers)))\r\n            .then(reduxUsers => this.separatePromise(() => UserActions.replaceUsers(reduxUsers)))\r\n\r\n        // return FirebaseController.load()\r\n        //     .then(bdUsers => convertToReduxUsers(bdUsers))\r\n        //     .then(reduxUsers => UserActions.replaceUsers(reduxUsers))\r\n    }\r\n\r\n    public static safetyLoad() {\r\n        return this.tryLoad()\r\n            .catch(e => console.error(e))\r\n    }\r\n\r\n    protected static separatePromise<T>(callback: () => Promise<T> | T, timeout = 0) {\r\n        return new Promise<T>((resolve) => {\r\n            setTimeout(() => { resolve(callback()) }, timeout)\r\n        })\r\n    }\r\n}\r\n","import { createData } from \"../../redux/store/reducer/userReducer/createData\";\r\nimport { TUser } from \"../../redux/store/reducer/userReducer/userReducer\";\r\nimport { TBdUsers } from \"../../types/reactComponents/basic\";\r\n\r\nexport function convertToReduxUsers(bdUsers: TBdUsers) {\r\n    const reduxUsers: TUser[] = bdUsers.map(bdUser => ({\r\n        id: createData(bdUser.id, 'valid'),\r\n        registration: createData(new Date(bdUser.registration), 'valid'),\r\n        lastActivity: createData(new Date(bdUser.lastActivity), 'valid'),\r\n    }))\r\n\r\n    return reduxUsers\r\n}\r\n\r\nexport function convertToBdUsers(reduxUsers: TUser[]) {\r\n    const bdUsers: TBdUsers = reduxUsers.map(reduxUser => ({\r\n        id: reduxUser.id.data,\r\n        registration: reduxUser.registration.data.getTime(),\r\n        lastActivity: reduxUser.lastActivity.data.getTime(),\r\n    }))\r\n\r\n    return bdUsers\r\n}\r\n","import { getUsers } from \"../../../controller/Engine/getters\";\r\nimport { UserActions } from \"../../../redux/actions/UserActions\";\r\nimport { createData } from \"../../../redux/store/reducer/userReducer/createData\";\r\nimport { TUser } from \"../../../redux/store/reducer/userReducer/userReducer\";\r\n\r\nexport function addUser() {\r\n    const reduxUsers = getUsers()\r\n    if (!Array.isArray(reduxUsers) || !reduxUsers.length) {\r\n        UserActions.addUsers([getDefaultUser()])\r\n        return\r\n    }\r\n\r\n    const lastId = reduxUsers[reduxUsers.length - 1].id.data\r\n    const newUser = getDefaultUser()\r\n    newUser.id.data = lastId + 1\r\n    UserActions.addUsers([newUser])\r\n}\r\n\r\nfunction getDefaultUser(): TUser {\r\n    const result = {\r\n        id: createData(1, 'needValidate'),\r\n        registration: createData(new Date(0), 'needValidate'),\r\n        lastActivity: createData(new Date(0), 'needValidate'),\r\n    }\r\n\r\n    const now = new Date()\r\n    result.registration.data.setFullYear(now.getFullYear(), now.getMonth(), now.getDate())\r\n    result.lastActivity.data.setFullYear(now.getFullYear(), now.getMonth(), now.getDate())\r\n\r\n    return result\r\n}\r\n\r\n\r\n","import { store } from \"../store\";\r\nimport { REPLACE_HISTOGRAM, REPLACE_METRICS, REPLACE_SPLINE, SET_RETENTION, TGrafReducerAction } from \"../store/reducer/grafReducer\";\r\n\r\n/** диспатчеры store.getState().graph */\r\nexport class GraphActions {\r\n    // retention\r\n\r\n    static setRetention(retention: Required<TGrafReducerAction['payload']>['retention']) {\r\n        store.dispatch({\r\n            type: SET_RETENTION,\r\n            payload: {\r\n                retention\r\n            },\r\n        })\r\n    }\r\n\r\n    // histogram\r\n\r\n    /** замена гистограмы */\r\n    static replaceHistogram(histogram: Required<TGrafReducerAction['payload']>['histogram']) {\r\n        store.dispatch({\r\n            type: REPLACE_HISTOGRAM,\r\n            payload: { histogram },\r\n        })\r\n    }\r\n\r\n    /** добавление точек в конец гистограмы */\r\n    static pushHistogramBins(binsSlice: Required<TGrafReducerAction['payload']>['histogram']['bins']) {\r\n        const histogram = store.getState().graph.histogram\r\n        const bins = histogram.bins.concat(binsSlice)\r\n\r\n        store.dispatch({\r\n            type: REPLACE_HISTOGRAM,\r\n            payload: { histogram: { ...histogram, bins } },\r\n        })\r\n    }\r\n\r\n    // spline\r\n\r\n    static replaceSpline(spline: Required<TGrafReducerAction['payload']>['spline']) {\r\n        store.dispatch({\r\n            type: REPLACE_SPLINE,\r\n            payload: { spline },\r\n        })\r\n    }\r\n\r\n    // metrics\r\n\r\n    static replaceMetrics(metrics: Required<TGrafReducerAction['payload']>['metrics']) {\r\n        store.dispatch({\r\n            type: REPLACE_METRICS,\r\n            payload: { metrics },\r\n        })\r\n    }\r\n}\r\n","import { GraphActions } from \"../redux/actions/GraphActions\";\r\nimport { getHistogram, getUsers } from \"./Engine/getters\";\r\n\r\nexport class Histogram{\r\n\r\n    public static calcAll() {\r\n        this.calcMetrics()\r\n        setTimeout(this.calcHistogram.bind(this), 0)\r\n        setTimeout(this.calcSpline.bind(this), 0)\r\n    }\r\n\r\n    // Histogram\r\n\r\n    public static calcHistogram() {\r\n        const rawBins = this.getBinLifeTimes()\r\n\r\n        const maxBin = Math.max(...rawBins)\r\n        const bins = this.normTo1(rawBins, maxBin)\r\n\r\n        GraphActions.replaceHistogram({ bins, maxBin })\r\n    }\r\n\r\n    protected static getBinLifeTimes() {\r\n        const lives = this.getLifeDays().map(d => Math.round(d))\r\n        const biggestLife = Math.max(...lives)\r\n\r\n        /** массив столбцов гистограмы */\r\n        const bins: number[] = (new Array(biggestLife + 1)).fill(0)\r\n        for (const life of lives) {\r\n            bins[life] += 1\r\n        }\r\n\r\n        return bins\r\n    }\r\n\r\n    protected static normTo1(raw: number[], max?: number) {\r\n        const k = max || Math.max(...raw)\r\n        if (!k) { return raw }\r\n        return raw.map(n => n / k)\r\n    }\r\n\r\n    /** @returns массив времён жизни всех пользователей */\r\n    protected static getLifeDays() {\r\n        const DAY = 24 * 60 * 60 * 1000\r\n        const users = getUsers()\r\n        return users\r\n            .map(user => (user.lastActivity.data.getTime() - user.registration.data.getTime()) / DAY)\r\n    }\r\n\r\n    // Metrics\r\n\r\n    protected static calcMetrics() {\r\n        const lifeDays = this.getLifeDays().sort((a, b) => a - b)\r\n\r\n        const result = {\r\n            average: this.getAverage(lifeDays),\r\n            median: this.getMedian(lifeDays),\r\n            percentile10: this.getPercentile(lifeDays, 10),\r\n            percentile90: this.getPercentile(lifeDays, 90),\r\n        }\r\n\r\n        GraphActions.replaceMetrics(result)\r\n    }\r\n\r\n    protected static getAverage(lifeTimes: number[]) {\r\n        const sum = lifeTimes.reduce((p, c) => p + c, 0)\r\n        const average = sum / lifeTimes.length\r\n        return average\r\n    }\r\n\r\n    /** @param sortedLifeTimes: sorted number[] */\r\n    protected static getMedian(sortedLifeTimes: number[]) {\r\n        if (sortedLifeTimes.length % 2 > 0) {\r\n            return sortedLifeTimes[Math.floor(sortedLifeTimes.length / 2)]\r\n        } else {\r\n            // length / 2 указывает на последний в паре элемент. Потому берём его и i-1\r\n            const i = Math.round(sortedLifeTimes.length / 2)\r\n            return 0.5 * (sortedLifeTimes[i - 1] + sortedLifeTimes[i])\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param sortedLifeTimes: sorted number[]\r\n     * @param percent: [0..100] request Percentile\r\n    */\r\n    protected static getPercentile(sortedLifeTimes: number[], percent: number) {\r\n        const percentIndex = (sortedLifeTimes.length - 1) * (percent / 100)\r\n        if (percentIndex === Math.floor(percentIndex)) { return sortedLifeTimes[percentIndex] }\r\n\r\n        const min = sortedLifeTimes[Math.floor(percentIndex)]\r\n        const max = sortedLifeTimes[Math.ceil(percentIndex)]\r\n\r\n        const delta = (max - min)\r\n        const k = percentIndex - Math.floor(percentIndex)\r\n\r\n        return min + delta * k\r\n    }\r\n\r\n    // Spline\r\n\r\n    protected static calcSpline() {\r\n        const histogram = getHistogram()\r\n        if (!histogram?.bins?.length) { return }\r\n\r\n        const bins = histogram.bins\r\n        const points: number[] = []\r\n\r\n        for (let i = 0; i < bins.length - 1; i++) {\r\n            points.push(bins[i])\r\n            // среднее между соседними точками\r\n            points.push((bins[i] + bins[i + 1]) / 2)\r\n        }\r\n        points.push(bins[bins.length - 1])\r\n\r\n        GraphActions.replaceSpline(points)\r\n    }\r\n}\r\n","import { GraphActions } from \"../redux/actions/GraphActions\";\r\nimport { getUsers } from \"./Engine/getters\";\r\n\r\nexport class Retention{\r\n\r\n    public static calcRetention() {\r\n        const retention7 = this.getRollingRetention(7)\r\n        if (Number.isFinite(retention7)) { GraphActions.setRetention(retention7) }\r\n    }\r\n\r\n    /**\r\n     * @param days Retention interval. int > 0 .\r\n     * особенность формулировки функции в том, что юзер может и регнуться X+n дней назад, и вернуться через X+(m<=n) дней.\r\n     * такие юзеры приближают функцию к 1\r\n     */\r\n    protected static getRollingRetention(days: number) {\r\n        // если вернулся в день когда регнулся, это возврат в 0 день или в 1 ?\r\n        // буду считать что это 0 день\r\n\r\n        // что считать началом дня? полночь по гринвичу или в часовом поясе клиента?\r\n        // а может лучше осчитывать интевал от момента регистрации, а не от начала дня регистрации?\r\n        // буду считать что это полночь по гринвичу\r\n\r\n        // после округления интервал будет == 0. В результате чего в оба фильтра попадут все пользователи.\r\n        // поменять если из фильтров уберут нестрогие неравентства\r\n        if (days < 1) { return 1 }\r\n\r\n        /** запрашиваемый интервал */\r\n        const intervalTime = this.floorTime(this.getIntervalTime(days))\r\n\r\n        /** начало сегодняшних суток */\r\n        const now = this.floorTime(Date.now())\r\n\r\n        let returns = 0, news = 0\r\n\r\n        const users = getUsers()\r\n        for (const user of users) {\r\n            /** начало суток в которых юзер зарегистрировался */\r\n            const registration = this.floorTime(user.registration.data.getTime())\r\n            // количество пользователей, зарегистрировавшихся в системе X дней назад или раньше\r\n            // это значит что расстояние между округлёнными таймстампами должно быть >= округлённого запрашиваемого интервала\r\n            if (now - registration >= intervalTime) {\r\n                news++\r\n            }\r\n\r\n            /** начало суток в которых была последняя активность юзера */\r\n            const lastActivity = this.floorTime(user.lastActivity.data.getTime())\r\n            // количество пользователей, вернувшихся в систему в X-ый день после регистрации или позже\r\n            // по сути та-же функция что в условии выше. Т.к. в формулировке меняется знак времени\r\n            if (lastActivity - registration >= intervalTime) {\r\n                returns++\r\n            }\r\n\r\n            // особенность формулировки функции в том, что юзер может и регнуться X+n дней назад, и вернуться через X+(m<=n) дней.\r\n            // такие юзеры приближают функцию к 1\r\n\r\n            // а ещё все \"вернувшиеся\" так-же попадают в фильтр \"новых\". Из чего следуется что результат <=1\r\n            // И это позволяет поместить второй if в первый, для чуть большей оптимизации.\r\n            // но меня смущает постановка задачи, потому такую оптимизацию стоит делать после уточнения всех вопросов что тут написал\r\n        }\r\n\r\n        // 0 / 0\r\n        if (!news) { return NaN }\r\n\r\n        return returns / news\r\n    }\r\n\r\n    private static readonly DAY = 24 * 60 * 60 * 1000\r\n    protected static getIntervalTime(days: number) {\r\n        return days * this.DAY\r\n    }\r\n    protected static floorTime(time: number) {\r\n        return time - time % this.DAY\r\n    }\r\n\r\n    /**\r\n     * @param days Retention interval. int > 0\r\n     * @deprecated\r\n     */\r\n    protected static getSimpleRollingRetention(days: number) {\r\n        if (days < 1) { return NaN }\r\n        const intervalTime = this.getIntervalTime(days)\r\n        const users = getUsers()\r\n\r\n        let returns = 0, news = 0\r\n        const now = Date.now()\r\n\r\n        for (const user of users) {\r\n            const registration = user.registration.data.getTime()\r\n            if (now - registration <= intervalTime) {\r\n                news++\r\n            } else if (user.lastActivity.data.getTime() - registration >= intervalTime) {\r\n                returns++\r\n            }\r\n        }\r\n\r\n        if (!news) { return NaN }\r\n\r\n        return returns / news\r\n    }\r\n}\r\n","import { Histogram } from \"../../../controller/Histogram\"\r\nimport { Retention } from \"../../../controller/Retention\"\r\n\r\nexport function calculate() {\r\n    Retention.calcRetention()\r\n    Histogram.calcAll()\r\n}\r\n","import React, { useState } from 'react';\r\nimport './Controls.scss';\r\nimport './button/button.scss';\r\nimport { save } from './EventHandlers/Save';\r\nimport { addUser } from './EventHandlers/AddUser';\r\nimport { calculate } from './EventHandlers/Calculate';\r\nimport { useSelector } from 'react-redux';\r\nimport { TState } from '../../redux/store/reducer';\r\n\r\nexport const Controls: React.FC = () => {\r\n    const usersIsExists = useSelector((store: TState) => store.users?.length > 0)\r\n\r\n    const [loading, setLoading] = useState(false)\r\n    const saveButtonClick: React.MouseEventHandler<HTMLButtonElement> = function (event) {\r\n        if (loading) { return }\r\n        setLoading(true)\r\n        save(() => setLoading(false))\r\n    }\r\n\r\n    return <div\r\n        className=\"controls\"\r\n    >\r\n        <button\r\n            className='controls-button_add button'\r\n            // disabled={loading}\r\n            type='button'\r\n            onClick={addUser}\r\n        >Add</button>\r\n        <button\r\n            className='controls-button_save button'\r\n            disabled={!usersIsExists}\r\n            type='submit'\r\n            onClick={saveButtonClick}\r\n        >Save</button>\r\n        <button\r\n            className='controls-button_calculate button'\r\n            disabled={!usersIsExists}\r\n            type='button'\r\n            onClick={calculate}\r\n        >Calculate</button>\r\n    </div>\r\n}\r\n\r\nexport default Controls\r\n","import { Engine } from \"../../../controller/Engine\"\r\n\r\nexport function save(callback: () => void) {\r\n    return Engine.trySave()\r\n        .then(() => Engine.tryLoad())\r\n        .catch(e => console.error(e))\r\n        .finally(callback)\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { TState } from '../../../../redux/store/reducer';\r\n\r\ninterface HistogramSVGProps{\r\n    height?: number\r\n}\r\n\r\nexport const HistogramSVG: React.FC<HistogramSVGProps> = ({ height = 500 }) => {\r\n    const reduxMaxBin = useSelector((store: TState) => store.graph.histogram.maxBin || 0)\r\n    const reduxBins = useSelector((store: TState) => store.graph.histogram.bins)\r\n    const percentile10 = useSelector((store: TState) => store.graph.metrics.percentile10)\r\n    const percentile90 = useSelector((store: TState) => store.graph.metrics.percentile90)\r\n\r\n    if (!Array.isArray(reduxBins) || !reduxBins.length || !reduxMaxBin) { return <svg /> }\r\n\r\n    const maxBin = reduxMaxBin\r\n    const bins = reduxBins\r\n\r\n    const mainHeight = height\r\n    const PADDING = 50\r\n    const BAR_WIDTH = 10\r\n    const GAP = 3\r\n\r\n    const xStep = BAR_WIDTH + GAP\r\n    const maxHeight = mainHeight - PADDING * 2\r\n    const mainWidth = bins.length * (BAR_WIDTH + GAP) + PADDING * 2\r\n\r\n    /** генерирует столбцы гистограмы. Они растут вверх отступая от нижней границы экрана и боков на PADDING */\r\n    function getRects() {\r\n        const bad = '#FF5151'\r\n        const good = '#5CDC70'\r\n\r\n        const result = bins.map((bin, i) => {\r\n            let fill = 'inherit'\r\n            if (percentile10 >= i) {\r\n                fill = bad\r\n            } else if (percentile90 < i) {\r\n                fill = good\r\n            }\r\n\r\n            const height = bin * maxHeight\r\n            return <g fill={fill} key={i}>\r\n                <rect\r\n                    x={`${i * xStep + PADDING}`}\r\n                    y={`${mainHeight - height - PADDING}`}\r\n                    width={`${BAR_WIDTH}`}\r\n                    height={`${height}`}\r\n                />\r\n                {!(i % 5) && getText(i)}\r\n            </g>\r\n        })\r\n        return result\r\n    }\r\n\r\n    function getText(i: number) {\r\n        return <text\r\n            x={`${i * xStep + PADDING + BAR_WIDTH / 2}`}\r\n            y={`${mainHeight - PADDING / 2}`}\r\n            textAnchor='middle'\r\n        >{`${i}`}</text>\r\n    }\r\n\r\n    function getYScale() {\r\n        const x = PADDING / 2\r\n        const half = maxBin / 2\r\n        const yTop = mainHeight - PADDING - maxHeight\r\n        const yMiddle = mainHeight - PADDING - maxHeight / 2\r\n        const yBottom = mainHeight - PADDING\r\n\r\n        return <g stroke=\"rgba(74, 157, 255, .4)\">\r\n            <text x={`${x}`} textAnchor='middle'\r\n                y={`${yTop}`}\r\n            >{`${maxBin}`}</text>\r\n            <line x1={`${x}`}\r\n                x2={`${mainWidth - PADDING}`}\r\n                y1={`${yTop} `} y2={`${yTop}`}\r\n            />\r\n\r\n            <text x={`${x}`} textAnchor='middle'\r\n                y={`${yMiddle}`}\r\n            >{`${half}`}</text>\r\n            <line x1={`${x}`}\r\n                x2={`${mainWidth - PADDING}`}\r\n                y1={`${yMiddle} `} y2={`${yMiddle}`}\r\n            />\r\n\r\n            <text x={`${x}`} textAnchor='middle'\r\n                y={`${yBottom}`}\r\n            >0</text>\r\n            <line x1={`${x}`}\r\n                x2={`${mainWidth - PADDING}`}\r\n                y1={`${yBottom} `} y2={`${yBottom}`}\r\n            />\r\n        </g>\r\n    }\r\n\r\n    function getSpline() {\r\n        return <g stroke=\"rgba(74, 157, 255, .4)\">\r\n        </g>\r\n    }\r\n\r\n    return <svg\r\n        width={`${mainWidth}`}\r\n        height={`${mainHeight}`}\r\n        textRendering=\"optimizeLegibility\"\r\n        version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n        <g fill=\"#4A9DFF\">\r\n            {getYScale()}\r\n            {getRects()}\r\n            {getSpline()}\r\n        </g>\r\n    </svg>\r\n}\r\n\r\nexport default HistogramSVG\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { TState } from '../../../redux/store/reducer';\r\nimport './Histogram.scss';\r\nimport { HistogramSVG } from './HistogramSVG/HistogramSVG';\r\n\r\nexport const Histogram: React.FC = () => {\r\n    const histogramIsExists = useSelector((store: TState) => !!store.graph.histogram.bins?.length)\r\n\r\n    return <div\r\n        className=\"histogram\"\r\n    >\r\n        {histogramIsExists && <HistogramSVG />}\r\n    </div>\r\n}\r\n\r\nexport default Histogram\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { TState } from '../../../redux/store/reducer';\r\nimport './Metrics.scss';\r\n\r\nexport const Metrics: React.FC = () => {\r\n    const retention = useSelector((store: TState) => store.graph.retention)\r\n    const metrics = useSelector((store: TState) => store.graph.metrics)\r\n    if (!Number.isFinite(retention)) { return <div /> }\r\n\r\n    return <div\r\n        className=\"metrics\"\r\n    >\r\n        <span>\r\n            {`Rolling Retention 7 day: ${(retention * 100).toFixed(1)}%`}\r\n        </span>\r\n        <span>\r\n            {`LifeTimes:`}\r\n        </span>\r\n        <span>\r\n            {`average : ${metrics.average.toFixed(1)}`}\r\n        </span>\r\n        <span>\r\n            {`median : ${metrics.median.toFixed(1)}`}\r\n        </span>\r\n        <span>\r\n            {`10 percentile : ${metrics.percentile10.toFixed(1)}`}\r\n        </span>\r\n        <span>\r\n            {`90 percentile : ${metrics.percentile90.toFixed(1)}`}\r\n        </span>\r\n    </div>\r\n}\r\n\r\nexport default Metrics\r\n\r\n","import React from 'react';\r\nimport './Graph.scss';\r\nimport { Histogram } from './Histogram/Histogram';\r\nimport { Metrics } from './Retention/Metrics';\r\n\r\nexport const Graph: React.FC = () => {\r\n    return <div\r\n        className=\"graph\"\r\n    >\r\n        <Metrics />\r\n        <div className='graph-histogram'>\r\n            <Histogram />\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Graph\r\n\r\n","import { getUsers } from \"../../../../controller/Engine/getters\";\r\nimport { Validate } from \"../../../../controller/Validate\";\r\nimport { UserActions } from \"../../../../redux/actions/UserActions\";\r\nimport { createData } from \"../../../../redux/store/reducer/userReducer/createData\";\r\nimport { TUser } from \"../../../../redux/store/reducer/userReducer/userReducer\";\r\n\r\nexport function updateUser(newUser: Partial<TUser>, index: number) {\r\n    const user = getUsers()[index]\r\n    if (!user) { return }\r\n    UserActions.updateUser({ ...user, ...newUser }, index)\r\n}\r\n\r\nexport function deleteUser(index: number) {\r\n    UserActions.deleteUser(index)\r\n}\r\n\r\ntype getUpdateUserHandlerParams<K extends keyof TUser> = {\r\n    /** номер юзера которого нужно обновлять */\r\n    index: number,\r\n    /** ключ TUser для которого нужно сгенерировать хандлер */\r\n    key: K,\r\n    /** вызывается после обновления юзера */\r\n    changeCallback: (newValue: string | number) => void\r\n}\r\n\r\n/**\r\n * возвращает хандлер адаптированный под переданный ключ TUser.\r\n * Если из эвента пришли валидные данные, обновляет юзера по указанному индексу.\r\n * Если передать callback, вызовет его после обновления юзера\r\n */\r\nexport function getUpdateUserHandler<K extends keyof TUser>(p: getUpdateUserHandlerParams<K>): React.FocusEventHandler<HTMLInputElement> {\r\n    let converter: (value: string) => TUser[K]['data'] | null\r\n    let validator: (index: number) => void\r\n    let reverseConverter: (value: TUser[K]['data']) => string | number\r\n\r\n    if (p.key === 'id') {\r\n        converter = getNumber\r\n        validator = Validate.validateUserId.bind(Validate)\r\n        reverseConverter = value => value as number\r\n    } else if (p.key === 'lastActivity' || p.key === 'registration') {\r\n        converter = getDateFromHTML\r\n        validator = Validate.validateUserDate.bind(Validate)\r\n        reverseConverter = getHTMLDate as typeof reverseConverter\r\n    }\r\n\r\n    const index = p.index, key = p.key, changeCallback = p.changeCallback\r\n\r\n    return function (event) {\r\n        const value = converter(event.target.value)\r\n        if (value === null) { return }\r\n        UserActions.updateUser({ [key]: createData(value, 'valid') }, index)\r\n        validator(index)\r\n        // синхронизация состояний. На случай если появятся промежуточные обработчики\r\n        const user = getUsers()[index]\r\n        changeCallback(reverseConverter(user[key].data))\r\n    }\r\n}\r\n\r\n/** возвращает null при ошибках */\r\nexport function getDateFromHTML(date: string) {\r\n    if (!date?.split) { return null }\r\n    const dateValues = date.trim().split('-').map(value => parseInt(value))\r\n    if (dateValues.length < 3 || !dateValues.every(value => Number.isFinite(value) && value >= 0)) { return null }\r\n\r\n    const newDate = new Date(0)\r\n    newDate.setFullYear(dateValues[0], dateValues[1] - 1, dateValues[2])\r\n\r\n    return newDate\r\n}\r\n\r\nfunction getNumber(value: string) { return +value }\r\n\r\nexport function getHTMLDate(date: Date) {\r\n    if (!date?.getFullYear) { return '' }\r\n    return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`\r\n}\r\n","import React, { useState } from 'react';\r\nimport './User.scss';\r\nimport { useSelector } from 'react-redux';\r\nimport { TState } from '../../../redux/store/reducer';\r\nimport { IBasicProps } from '../../../types/reactComponents/basic';\r\nimport { deleteUser, getHTMLDate, getUpdateUserHandler } from './eventHandlers/updateUser';\r\n\r\ninterface IUserProps extends IBasicProps{\r\n    index: number\r\n}\r\n\r\nexport const User: React.FC<IUserProps> = ({ index, requireCssClass }) => {\r\n    const reduxId = useSelector((store: TState) => store.users[index]?.id.data)\r\n    const [id, setId] = useState(reduxId)\r\n    const idIsValid = useSelector((store: TState) => store.users[index]?.id.status !== 'invalid')\r\n\r\n    const reduxRegistration = useSelector((store: TState) => getHTMLDate(store.users[index]?.registration.data))\r\n    const [registration, setRegistration] = useState(reduxRegistration)\r\n    const registrationIsValid = useSelector((store: TState) => store.users[index]?.registration.status !== 'invalid')\r\n\r\n    const reduxLastActivity = useSelector((store: TState) => getHTMLDate(store.users[index]?.lastActivity.data))\r\n    const [lastActivity, setLastActivity] = useState(reduxLastActivity)\r\n    const lastActivityIsValid = useSelector((store: TState) => store.users[index]?.lastActivity.status !== 'invalid')\r\n\r\n    if (!id && id !== 0) { return <div /> }\r\n\r\n    const mainClass = requireCssClass + ' user'\r\n    return <tr className={mainClass}>\r\n        <td className={'user-item user-item_first'}>\r\n            <input\r\n                value={id}\r\n                name=\"userId\"\r\n                min={0}\r\n                step={1}\r\n                onChange={event => setId(+event.target.value)}\r\n                onBlur={getUpdateUserHandler({\r\n                    key: 'id', index,\r\n                    changeCallback: newValue => { setId(newValue as number) }\r\n                })}\r\n                type=\"number\"\r\n                className={'user-item-input user-item-input_clear' + (idIsValid ? '' : ' user-item-input_invalid')}\r\n                size={id.toString().length + 1}\r\n                />\r\n        </td>\r\n        <td className={'user-item'}>\r\n            <input\r\n                value={registration}\r\n                name=\"registration\"\r\n                max={getHTMLDate(new Date())}\r\n                onChange={event => setRegistration(event.target.value)}\r\n                onBlur={getUpdateUserHandler({\r\n                    key: 'registration', index,\r\n                    changeCallback: newValue => { setRegistration(newValue as string) }\r\n                })}\r\n                type=\"date\"\r\n                className={'user-item-input' + (registrationIsValid ? '' : ' user-item-input_invalid')}\r\n                />\r\n        </td>\r\n        <td className={'user-item'}>\r\n            <input\r\n                value={lastActivity}\r\n                name=\"lastActivity\"\r\n                max={getHTMLDate(new Date())}\r\n                onChange={event => setLastActivity(event.target.value)}\r\n                onBlur={getUpdateUserHandler({\r\n                    key: 'lastActivity', index,\r\n                    changeCallback: newValue => { setLastActivity(newValue as string) }\r\n                })}\r\n                type=\"date\"\r\n                className={'user-item-input' + (lastActivityIsValid ? '' : ' user-item-input_invalid')}\r\n            />\r\n        </td>\r\n        <td className={'user-item user-item_last'}>\r\n            <button\r\n                className={'user-delete_button'}\r\n                type=\"button\"\r\n                onClick={() => { deleteUser(index) }}\r\n            >\r\n                <img src=\"./img/trash.svg\" alt=\"удалить\" />\r\n            </button>\r\n        </td>\r\n    </tr>\r\n}\r\n\r\nexport default User\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { TState } from '../../redux/store/reducer';\r\nimport './Table.scss';\r\nimport { User } from './User/User';\r\n\r\nexport const Table: React.FC = () => {\r\n    const users = useSelector((store: TState) => store.users)\r\n\r\n    return <table className=\"table\">\r\n        <caption className=\"table-caption\">Users activity</caption>\r\n        <thead className=\"table-head\">\r\n            <tr>\r\n                <th className=\"table-head-item\" scope=\"col\">UserID</th>\r\n                <th className=\"table-head-item\" scope=\"col\">Date Registration</th>\r\n                <th className=\"table-head-item\" scope=\"col\">Date Last Activity</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody className={\"table-body\"}>{\r\n            users.map((user, index) => <User\r\n                requireCssClass='table-body-item'\r\n                index={index}\r\n                key={`table-${index}-${user.id}`}\r\n            />)\r\n        }</tbody>\r\n    </table>\r\n}\r\n\r\nexport default Table\r\n\r\n","import React from 'react';\r\nimport './App.scss';\r\nimport { Controls } from './Controls/Controls';\r\nimport { Graph } from './Graph/Graph';\r\nimport { Table } from './Table/Table';\r\n\r\nexport const App: React.FC = () => {\r\n  return <div className=\"app\">\r\n    <Controls />\r\n    <div className=\"app-data\">\r\n      <div className=\"app-data-table\">\r\n        <Table />\r\n      </div>\r\n      <div className=\"app-data-graph\">\r\n        <Graph />\r\n      </div>\r\n    </div>\r\n  </div>\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './redux/store';\r\nimport { Engine } from './controller/Engine';\r\n\r\nEngine.init()\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>,\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}