{"version":3,"sources":["api/FirebaseController/Firebase/init.ts","api/FirebaseController/Firebase.ts","api/FirebaseController.ts","redux/store/reducer/grafReducer.ts","redux/store/reducer/userReducer.ts","redux/store/reducer.ts","redux/store.ts","redux/actions/UserActions.ts","controller/Engine/getters.ts","controller/Validate.ts","controller/Engine.ts","controller/Engine/converters.ts","app/Controls/EventHandlers/AddUser.ts","redux/actions/GraphActions.ts","controller/Histogram.ts","controller/Retention.ts","app/Controls/EventHandlers/Calculate.ts","app/Controls/Controls.tsx","app/Controls/EventHandlers/Save.ts","app/Graph/Histogram/HistogramSVG/HistogramSVG.tsx","app/Graph/Histogram/Histogram.tsx","app/Graph/Retention/Retention.tsx","app/Graph/Graph.tsx","app/Table/User/dateParser/dateParser.ts","app/Table/User/eventHandlers/updateUser.ts","app/Table/User/User.tsx","app/Table/Table.tsx","app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","selfFirestore","getFirestore","Firebase","collectionName","this","collections","has","set","firestore","get","collection","data","getCollection","id","getFirestoreDocs","then","result","docs","map","doc","ref","docRefs","forEach","Map","USERS","FirebaseController","getDocs","bdUsers","sort","a","b","deleteCollection","Promise","all","bdUser","add","REPLACE_HISTOGRAM","REPLACE_SPLINE","SET_RETENTION","grafReducer","graph","action","type","payload","histogram","spline","undefined","retention","ADD_USERS","REPLACE_USERS","userReducer","users","concat","defaultState","NaN","bins","maxBin","reducer","state","store","createStore","UserActions","dispatch","user","to","getState","i","Number","isFinite","length","temp","getUsers","Validate","validateAllIds","tester","allValid","index","count","indexes","push","needUpdate","validateUsers","isValid","replaceUsers","from","every","updateUser","_","validateUserDate","registration","getTime","lastActivity","Date","now","Engine","safetyLoad","validate","Error","load","convertToReduxUsers","reduxUsers","tryLoad","catch","e","console","error","addUser","event","Array","isArray","lastUser","addUsers","getDefaultUser","GraphActions","binsSlice","Histogram","rawBins","getBinLifeTimes","Math","max","normTo1","replaceHistogram","lifeTimes","getLifeTimes","fill","maxI","lifeTime","floor","DAY","slice","raw","k","n","maxValue","round","random","Retention","retention7","getRollingRetention","setRetention","days","intervalTime","floorTime","getIntervalTime","returns","news","time","calculate","calcRetention","calcHistogram","Controls","useState","loading","setLoading","className","disabled","onClick","trySave","finally","HistogramSVG","height","useSelector","mainHeight","PADDING","maxHeight","mainWidth","getText","x","BAR_WIDTH","y","textAnchor","width","textRendering","version","xmlns","half","yTop","yMiddle","yBottom","stroke","x1","x2","y1","y2","getYScale","bin","histogramIsExists","Graph","getHTMLDate","date","getFullYear","getMonth","toString","padStart","getDate","getDateFromHTML","split","dateValues","trim","value","parseInt","newDate","setFullYear","newUser","User","requireCssClass","userId","mainClass","name","onChange","target","size","Table","left","right","scope","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","init","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c23ed63a.chunk.js","sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\n\r\nexport const app = initializeApp({\r\n    apiKey: \"AIzaSyAy2GjQAfutCFa3toa9WLDFTkMehtj_CNk\",\r\n    authDomain: \"useractivity-4c085.firebaseapp.com\",\r\n    projectId: \"useractivity-4c085\",\r\n    storageBucket: \"useractivity-4c085.appspot.com\",\r\n    messagingSenderId: \"1007647890248\",\r\n    appId: \"1:1007647890248:web:91e91fec7ca033ae29b17d\"\r\n})\r\n\r\nexport const selfFirestore = getFirestore(app)\r\n\r\n","import * as firestore from \"firebase/firestore\";\r\nimport { DocumentData } from \"firebase/firestore\";\r\nimport { selfFirestore } from \"./Firebase/init\";\r\n\r\nexport class Firebase{\r\n    // private static readonly app = app\r\n\r\n    private static readonly selfFirestore = selfFirestore\r\n    public static readonly firestore = firestore\r\n\r\n    private static readonly collections: Map<string, ReturnType<typeof firestore['collection']>> = new Map()\r\n    protected static getCollection(collectionName: string) {\r\n        if (!this.collections.has(collectionName)) {\r\n            this.collections.set(collectionName, firestore.collection(this.selfFirestore, collectionName))\r\n        }\r\n        return this.collections.get(collectionName)!\r\n    }\r\n\r\n    public static add<T extends Record<string, number | string>>(collection: string, data: T) {\r\n        return firestore.addDoc(this.getCollection(collection), data)\r\n    }\r\n\r\n    protected static getFirestoreDocs(collection: string) {\r\n        return firestore.getDocs(firestore.collectionGroup(this.selfFirestore, this.getCollection(collection).id))\r\n    }\r\n\r\n    /** получает все документы коллекции, затем их все удаляет */\r\n    public static deleteCollection(collection: string) {\r\n        return this.getFirestoreDocs(collection)\r\n        .then(result => result.docs.map(doc => doc.ref))\r\n        .then(docRefs => docRefs.forEach(ref => firestore.deleteDoc(ref)))\r\n    }\r\n\r\n    /** возвращает все документы коллекции */\r\n    public static getDocs<T extends DocumentData = DocumentData>(collection: string) {\r\n        return this.getFirestoreDocs(collection)\r\n            .then(result => result.docs\r\n                .map(doc => doc.data() as T)\r\n            )\r\n    }\r\n}\r\n\r\n","import { TBdUsers } from \"../types/reactComponents/basic\";\r\nimport { Firebase } from \"./FirebaseController/Firebase\";\r\n\r\nconst USERS = 'users'\r\n\r\nexport class FirebaseController{\r\n    /** загружает и возвращает данные из коллекции users */\r\n    public static load() {\r\n        return Firebase.getDocs<TBdUsers[0]>(USERS)\r\n            .then(bdUsers => bdUsers.sort((a, b) => a.id - b.id))\r\n    }\r\n\r\n    /** очищает коллекцию users и сохраняет в неё переданный массив */\r\n    public static saveAll(bdUsers: TBdUsers) {\r\n        return Firebase.deleteCollection(USERS)\r\n            .then(() => Promise.all(bdUsers\r\n                .map(bdUser => Firebase.add(USERS, bdUser))))\r\n    }\r\n}\r\n","import { TAction, TDefaultAction } from \"../reducer\"\r\n\r\nexport const REPLACE_HISTOGRAM = 'REPLACE_HISTOGRAM'\r\nexport const REPLACE_SPLINE = 'REPLACE_SPLINE'\r\nexport const SET_RETENTION = 'SET_RETENTION'\r\n\r\nexport function grafReducer(graph: TGraph, action: TAction): TGraph {\r\n\r\n    if (action.type === REPLACE_HISTOGRAM && action.payload.histogram ) {\r\n        return { ...graph, histogram: { ...graph.histogram, ...action.payload.histogram } }\r\n    } else if (action.type === REPLACE_SPLINE && action.payload.spline) {\r\n        return { ...graph, spline: action.payload.spline }\r\n    } else if (action.type === SET_RETENTION && action.payload.retention !== undefined) {\r\n        return { ...graph, retention: +action.payload.retention }\r\n    }\r\n\r\n    return graph\r\n}\r\n\r\nexport type TGraph = {\r\n    retention: number\r\n    /** высоты столбцов гистограмы */\r\n    histogram: {\r\n        /** нормированные к 1 высоты столбцов гистограмы */\r\n        bins: number[]\r\n        /** высота максимального не нормированного столбца */\r\n        maxBin: number\r\n    }\r\n    /** точки сшивки кривых безье */\r\n    spline: number[]\r\n}\r\n\r\nexport interface TGrafReducerAction extends TDefaultAction {\r\n    type: typeof REPLACE_HISTOGRAM | typeof REPLACE_SPLINE | typeof SET_RETENTION\r\n    payload: Partial<TGraph>\r\n}\r\n\r\nexport default grafReducer\r\n","import { TAction, TDefaultAction } from \"../reducer\"\r\n\r\nexport const ADD_USERS = 'ADD_USERS'\r\nexport const REPLACE_USERS = 'REPLACE_USERS'\r\n\r\nexport function userReducer(users: TUsers, action: TAction) {\r\n    if (action.type === ADD_USERS) {\r\n        return users.concat(action.payload.users)\r\n    } else if (action.type === REPLACE_USERS) {\r\n        return [...action.payload.users]\r\n    }\r\n    return users\r\n}\r\n\r\n/** поле в redux. Это не просто массив. Если нужен массив пользователей используй TUser[] */\r\nexport type TUsers = TUser[]\r\n\r\nexport interface TUserReducerAction extends TDefaultAction {\r\n    type: typeof ADD_USERS | typeof REPLACE_USERS\r\n    payload: {\r\n        users: TUsers\r\n    }\r\n}\r\n\r\nexport type TUser = {\r\n    isValid: boolean\r\n    id: number\r\n    registration: Date\r\n    lastActivity: Date\r\n}\r\n\r\nexport default userReducer\r\n","import { Reducer } from \"redux\"\r\nimport { grafReducer, TGrafReducerAction, TGraph } from \"./reducer/grafReducer\"\r\nimport { TUserReducerAction, TUsers, userReducer } from \"./reducer/userReducer\"\r\n\r\nexport interface TDefaultAction {\r\n    type: string\r\n    payload?: Record<string, any>\r\n}\r\n\r\nexport type TAction =\r\n    | TUserReducerAction\r\n    | TGrafReducerAction\r\n\r\nexport type TState = {\r\n    /** массив юзеров для таблицы */\r\n    users: TUsers\r\n    /** данные для отображения графиков */\r\n    graph: TGraph\r\n}\r\n\r\nconst defaultState: TState = {\r\n    users: [],\r\n    graph: {\r\n        retention: NaN,\r\n        histogram: {\r\n            bins: [],\r\n            maxBin: NaN,\r\n        },\r\n        spline: [],\r\n    },\r\n}\r\n\r\nexport const reducer: Reducer<TState, TAction> = (state = defaultState, action) => {\r\n    return {\r\n        ...state,\r\n        users: userReducer(state.users, action),\r\n        graph: grafReducer(state.graph, action),\r\n    }\r\n}\r\n\r\nexport default reducer\r\n","import { createStore } from \"redux\";\r\nimport reducer from \"./store/reducer\";\r\n\r\nexport const store = createStore(reducer);\r\n\r\nexport default store\r\n","import { store } from \"../store\";\r\nimport { ADD_USERS, REPLACE_USERS, TUser, TUserReducerAction } from \"../store/reducer/userReducer\";\r\n\r\nexport class UserActions {\r\n    static addUsers(users: TUserReducerAction['payload']['users']) {\r\n        store.dispatch({\r\n            type: ADD_USERS,\r\n            payload: {\r\n                users\r\n            },\r\n        })\r\n    }\r\n\r\n    static updateUser(user: TUser, to: number) {\r\n        const users = store.getState().users\r\n        let i = to\r\n        if (!Number.isFinite(to) || to < 0) {\r\n            i = 0\r\n        } else if (to > users.length - 1) {\r\n            i = users.length - 1\r\n        }\r\n        const temp = users[i]\r\n        users[i] = { ...temp, ...user }\r\n        store.dispatch({\r\n            type: REPLACE_USERS,\r\n            payload: {\r\n                users\r\n            },\r\n        })\r\n    }\r\n\r\n    static replaceUsers(users: TUserReducerAction['payload']['users']) {\r\n        store.dispatch({\r\n            type: REPLACE_USERS,\r\n            payload: {\r\n                users\r\n            },\r\n        })\r\n    }\r\n}\r\n","import { store } from \"../../redux/store\";\r\n\r\nexport function getUsers() {\r\n    return store.getState().users\r\n}\r\n","import { UserActions } from \"../redux/actions/UserActions\"\r\nimport { TUser } from \"../redux/store/reducer/userReducer\"\r\nimport { getUsers } from \"./Engine/getters\"\r\n\r\nexport class Validate {\r\n    public static validate() {\r\n        // const users = getUsers()\r\n        const idValidate = this.validateAllIds()\r\n\r\n        return idValidate\r\n    }\r\n\r\n    /**\r\n     * Проверка уникальности id всех юзеров.\r\n     * Обновляет редакс при необходимости.\r\n     * O(2n) + обновление редакса.\r\n     */\r\n    public static validateAllIds() {\r\n        const users = getUsers()\r\n\r\n        const tester: { [k in number]: { count: number, indexes: number[], } } = {}\r\n\r\n        let allValid = true\r\n        users.forEach((user, index) => {\r\n            const id = user.id\r\n            if (tester[id]?.count) {\r\n                tester[id] = {\r\n                    count: 1,\r\n                    indexes: [index],\r\n                }\r\n            } else {\r\n                tester[id].indexes.push(index)\r\n                tester[id].count = tester[id].indexes.length\r\n                allValid = false\r\n            }\r\n        })\r\n\r\n        let needUpdate = false\r\n        const validateUsers = users.map(user => {\r\n            const count = tester[user.id]?.count\r\n            const isValid = !count || count === 1\r\n\r\n            if (user.isValid !== isValid) {\r\n                needUpdate = true\r\n                return {\r\n                    ...user,\r\n                    isValid\r\n                }\r\n            }\r\n\r\n            return user\r\n        })\r\n\r\n        if (needUpdate) {\r\n            UserActions.replaceUsers(validateUsers)\r\n        }\r\n\r\n        return allValid\r\n    }\r\n\r\n    public static validateUserId(from: number) {\r\n        const users = getUsers()\r\n        const id = users[from]?.id\r\n        if (!Number.isFinite(id)) { return false }\r\n\r\n        let isValid = users.every((user, i) => id !== user.id || from === i)\r\n\r\n        if (users[from].isValid !== isValid) {\r\n            users[from].isValid = isValid\r\n            UserActions.updateUser(users[from], from)\r\n        }\r\n\r\n        return isValid\r\n     }\r\n\r\n    /**\r\n     * проверяет даты всех пользователей, вызывая индивидуальную проверку для каждого.\r\n     * часто дёргает редакс.\r\n     */\r\n    public static validateAllDate() {\r\n        let allValid = true\r\n        const users = getUsers()\r\n        users.forEach((_, i) => { allValid = this.validateUserDate(i) && allValid })\r\n        return allValid\r\n    }\r\n    public static validateUserDate(from: number) {\r\n        const user = getUsers()[from]\r\n\r\n        let isValid = true\r\n        if (!user?.registration?.getTime || !user.lastActivity?.getTime) { isValid = false }\r\n        if (user.lastActivity.getTime() > Date.now()) { isValid = false }\r\n        if (user.registration.getTime() > user.lastActivity.getTime()) { isValid = false }\r\n\r\n        if (user.isValid !== isValid) {\r\n            user.isValid = isValid\r\n            UserActions.updateUser(user, from)\r\n        }\r\n\r\n        return isValid\r\n    }\r\n}\r\n","import { FirebaseController } from \"../api/FirebaseController\";\r\nimport { UserActions } from \"../redux/actions/UserActions\";\r\nimport { convertToBdUsers, convertToReduxUsers } from \"./Engine/converters\";\r\nimport { getUsers } from \"./Engine/getters\";\r\nimport { Validate } from \"./Validate\";\r\n\r\nexport class Engine{\r\n    public static init() {\r\n        return this.safetyLoad()\r\n    }\r\n\r\n    public static validate() {\r\n        return Validate.validate()\r\n    }\r\n\r\n    public static async trySave() {\r\n        if (!this.validate()) { throw new Error(\"invalid users data\") }\r\n\r\n        // const bdUsers = convertToBdUsers(getUsers())\r\n        // return FirebaseController.saveAll(bdUsers)\r\n    }\r\n\r\n    public static tryLoad() {\r\n        return FirebaseController.load()\r\n            .then(bdUsers => convertToReduxUsers(bdUsers))\r\n            .then(reduxUsers => UserActions.replaceUsers(reduxUsers))\r\n    }\r\n\r\n    public static safetyLoad() {\r\n        return this.tryLoad()\r\n            .catch(e => console.error(e))\r\n    }\r\n}\r\n","import { TUser } from \"../../redux/store/reducer/userReducer\";\r\nimport { TBdUsers } from \"../../types/reactComponents/basic\";\r\n\r\nexport function convertToReduxUsers(bdUsers: TBdUsers) {\r\n    return bdUsers.map(bdUser => ({\r\n        ...bdUser,\r\n        registration: new Date(bdUser.registration),\r\n        lastActivity: new Date(bdUser.lastActivity),\r\n    })) as TUser[]\r\n}\r\n\r\nexport function convertToBdUsers(reduxUsers: TUser[]) {\r\n    const bdUsers: TBdUsers = reduxUsers.map(reduxUser => ({\r\n        id: reduxUser.id,\r\n        registration: reduxUser.registration.getTime(),\r\n        lastActivity: reduxUser.lastActivity.getTime(),\r\n    }))\r\n\r\n    return bdUsers\r\n}\r\n","import { getUsers } from \"../../../controller/Engine/getters\";\r\nimport { UserActions } from \"../../../redux/actions/UserActions\";\r\n\r\nlet id = 0\r\n\r\nconst DAY = 24 * 60 * 60 * 1000\r\n\r\nexport const addUser: React.MouseEventHandler<HTMLButtonElement> = function (event) {\r\n    const reduxUsers = getUsers()\r\n    if (!Array.isArray(reduxUsers) || !reduxUsers.length) {\r\n        UserActions.addUsers([getDefaultUser()])\r\n        return\r\n    }\r\n\r\n    const lastUser = reduxUsers[reduxUsers.length - 1]\r\n    UserActions.addUsers([{\r\n        ...getDefaultUser(),\r\n        id: lastUser.id + 1,\r\n    }])\r\n}\r\n\r\nfunction getDefaultUser(): Parameters<typeof UserActions['addUsers']>[0][0] {\r\n    return {\r\n        id: 1,\r\n        registration: new Date(),\r\n        lastActivity: new Date(),\r\n        isValid: true,\r\n    }\r\n}\r\n\r\nfunction getManyUsers(count = 30) {\r\n    const reduxUsers = getUsers()\r\n    if (Array.isArray(reduxUsers) && reduxUsers.length > 0) {\r\n        id = reduxUsers[reduxUsers.length - 1]?.id || id\r\n    }\r\n\r\n    const users: Parameters<typeof UserActions['addUsers']>[0] = []\r\n\r\n    for (let i = 0; i < count; i++) {\r\n        users.push({\r\n            id: ++id,\r\n            registration: new Date(id * DAY),\r\n            lastActivity: new Date(),\r\n            isValid: true,\r\n        })\r\n    }\r\n\r\n    return users\r\n}\r\n\r\n\r\n","import { store } from \"../store\";\r\nimport { REPLACE_HISTOGRAM, REPLACE_SPLINE, SET_RETENTION, TGrafReducerAction } from \"../store/reducer/grafReducer\";\r\n\r\n/** диспатчеры store.getState().graph */\r\nexport class GraphActions {\r\n    // retention\r\n\r\n    static setRetention(retention: Required<TGrafReducerAction['payload']>['retention']) {\r\n        store.dispatch({\r\n            type: SET_RETENTION,\r\n            payload: {\r\n                retention\r\n            },\r\n        })\r\n    }\r\n\r\n    // histogram\r\n\r\n    /** замена гистограмы */\r\n    static replaceHistogram(histogram: Required<TGrafReducerAction['payload']>['histogram']) {\r\n        store.dispatch({\r\n            type: REPLACE_HISTOGRAM,\r\n            payload: { histogram },\r\n        })\r\n    }\r\n\r\n    /** добавление точек в конец гистограмы */\r\n    static pushHistogramBins(binsSlice: Required<TGrafReducerAction['payload']>['histogram']['bins']) {\r\n        const histogram = store.getState().graph.histogram\r\n        const bins = histogram.bins.concat(binsSlice)\r\n\r\n        store.dispatch({\r\n            type: REPLACE_HISTOGRAM,\r\n            payload: { histogram: { ...histogram, bins } },\r\n        })\r\n    }\r\n\r\n    // spline\r\n\r\n    static replaceSpline(spline: Required<TGrafReducerAction['payload']>['spline']) {\r\n        store.dispatch({\r\n            type: REPLACE_SPLINE,\r\n            payload: { spline },\r\n        })\r\n    }\r\n}\r\n","import { GraphActions } from \"../redux/actions/GraphActions\";\r\nimport { getUsers } from \"./Engine/getters\";\r\n\r\nexport class Histogram{\r\n    public static calcHistogram() {\r\n        const rawBins = this.getBinLifeTimes()\r\n\r\n        const maxBin = Math.max(...rawBins)\r\n        const bins = this.normTo1(rawBins, maxBin)\r\n\r\n        GraphActions.replaceHistogram({ bins, maxBin })\r\n    }\r\n\r\n    protected static getBinLifeTimes() {\r\n        const lifeTimes = this.getLifeTimes()\r\n        // const lifeTimes = this.getDebugBins(300, 51 * this.DAY)\r\n\r\n        /** массив столбцов гистограмы */\r\n        const bins: number[] = (new Array(lifeTimes.length)).fill(0)\r\n        let maxI = 0\r\n        for (const lifeTime of lifeTimes) {\r\n            const i = Math.floor(lifeTime / this.DAY)\r\n            bins[i] += 1\r\n            if (i > maxI) { maxI = i }\r\n        }\r\n\r\n        return bins.slice(0, maxI + 1)\r\n    }\r\n\r\n    /** @returns массив времён жизни всех пользователей */\r\n    protected static getLifeTimes() {\r\n        const users = getUsers()\r\n        return users\r\n        .map(user => user.lastActivity.getTime() - user.registration.getTime())\r\n    }\r\n\r\n    private static readonly DAY = 24 * 60 * 60 * 1000\r\n\r\n    protected static normTo1(raw: number[], max?: number) {\r\n        const k = max || Math.max(...raw)\r\n        if (!k) { return raw }\r\n        return raw.map(n => n / k)\r\n    }\r\n\r\n    protected static getDebugBins(count: number, maxValue: number) {\r\n        const bins: number[] = []\r\n        for (let i = 0; i < count; i++) {\r\n            bins.push(Math.round(Math.random() * maxValue))\r\n        }\r\n        return bins\r\n    }\r\n}\r\n","import { GraphActions } from \"../redux/actions/GraphActions\";\r\nimport { getUsers } from \"./Engine/getters\";\r\n\r\nexport class Retention{\r\n\r\n    public static calcRetention() {\r\n        const retention7 = this.getRollingRetention(7)\r\n        if (Number.isFinite(retention7)) { GraphActions.setRetention(retention7) }\r\n    }\r\n\r\n    /**\r\n     * @param days Retention interval. int > 0 .\r\n     * особенность формулировки функции в том, что юзер может и регнуться X+n дней назад, и вернуться через X+(m<=n) дней.\r\n     * такие юзеры приближают функцию к 1\r\n     */\r\n    protected static getRollingRetention(days: number) {\r\n        // если вернулся в день когда регнулся, это возврат в 0 день или в 1 ?\r\n        // буду считать что это 0 день\r\n\r\n        // что считать началом дня? полночь по гринвичу или в часовом поясе клиента?\r\n        // а может лучше осчитывать интевал от момента регистрации, а не от начала дня регистрации?\r\n        // буду считать что это полночь по гринвичу\r\n\r\n        // после округления интервал будет == 0. В результате чего в оба фильтра попадут все пользователи.\r\n        // поменять если из фильтров уберут нестрогие неравентства\r\n        if (days < 1) { return 1 }\r\n\r\n        /** запрашиваемый интервал */\r\n        const intervalTime = this.floorTime(this.getIntervalTime(days))\r\n\r\n        /** начало сегодняшних суток */\r\n        const now = this.floorTime(Date.now())\r\n\r\n        let returns = 0, news = 0\r\n\r\n        const users = getUsers()\r\n        for (const user of users) {\r\n            /** начало суток в которых юзер зарегистрировался */\r\n            const registration = this.floorTime(user.registration.getTime())\r\n            // количество пользователей, зарегистрировавшихся в системе X дней назад или раньше\r\n            // это значит что расстояние между округлёнными таймстампами должно быть >= округлённого запрашиваемого интервала\r\n            if (now - registration >= intervalTime) {\r\n                news++\r\n            }\r\n\r\n            /** начало суток в которых была последняя активность юзера */\r\n            const lastActivity = this.floorTime(user.lastActivity.getTime())\r\n            // количество пользователей, вернувшихся в систему в X-ый день после регистрации или позже\r\n            // по сути та-же функция что в условии выше. Т.к. в формулировке меняется знак времени\r\n            if (lastActivity - registration >= intervalTime) {\r\n                returns++\r\n            }\r\n\r\n            // особенность формулировки функции в том, что юзер может и регнуться X+n дней назад, и вернуться через X+(m<=n) дней.\r\n            // такие юзеры приближают функцию к 1\r\n\r\n            // а ещё все \"вернувшиеся\" так-же попадают в фильтр \"новых\". Из чего следуется что результат <=1\r\n            // И это позволяет поместить второй if в первый, для чуть большей оптимизации.\r\n            // но меня смущает постановка задачи, потому такую оптимизацию стоит делать после уточнения всех вопросов что тут написал\r\n        }\r\n\r\n        // 0 / 0\r\n        if (!news) { return NaN }\r\n\r\n        return returns / news\r\n    }\r\n\r\n    private static readonly DAY = 24 * 60 * 60 * 1000\r\n    protected static getIntervalTime(days: number) {\r\n        return days * this.DAY\r\n    }\r\n    protected static floorTime(time: number) {\r\n        return time - time % this.DAY\r\n    }\r\n\r\n    /**\r\n     * @param days Retention interval. int > 0\r\n     * @deprecated\r\n     */\r\n    protected static getSimpleRollingRetention(days: number) {\r\n        if (days < 1) { return NaN }\r\n        const intervalTime = this.getIntervalTime(days)\r\n        const users = getUsers()\r\n\r\n        let returns = 0, news = 0\r\n        const now = Date.now()\r\n\r\n        for (const user of users) {\r\n            const registration = user.registration.getTime()\r\n            if (now - registration <= intervalTime) {\r\n                news++\r\n            } else if (user.lastActivity.getTime() - registration >= intervalTime) {\r\n                returns++\r\n            }\r\n        }\r\n\r\n        if (!news) { return NaN }\r\n\r\n        return returns / news\r\n    }\r\n}\r\n","import { Histogram } from \"../../../controller/Histogram\"\r\nimport { Retention } from \"../../../controller/Retention\"\r\n\r\nexport const calculate: React.MouseEventHandler<HTMLButtonElement> = function (event) {\r\n    Retention.calcRetention()\r\n    Histogram.calcHistogram()\r\n}\r\n","import React, { useState } from 'react';\r\nimport './Controls.scss';\r\nimport './button/button.scss';\r\nimport { save } from './EventHandlers/Save';\r\nimport { addUser } from './EventHandlers/AddUser';\r\nimport { calculate } from './EventHandlers/Calculate';\r\n\r\nexport const Controls: React.FC = () => {\r\n    const [loading, setLoading] = useState(false)\r\n    const saveButtonClick: React.MouseEventHandler<HTMLButtonElement> = function (event) {\r\n        setLoading(true)\r\n        save().finally(() => setLoading(false))\r\n    }\r\n\r\n    return <div\r\n        className=\"controls\"\r\n    >\r\n        <button\r\n            className='controls-button_add button'\r\n            disabled={loading}\r\n            type='button'\r\n            onClick={addUser}\r\n        >Add</button>\r\n        <button\r\n            className='controls-button_save button'\r\n            disabled={loading}\r\n            type='submit'\r\n            onClick={saveButtonClick}\r\n        >Save</button>\r\n        <button\r\n            className='controls-button_calculate button'\r\n            disabled={loading}\r\n            type='button'\r\n            onClick={calculate}\r\n        >Calculate</button>\r\n    </div>\r\n}\r\n\r\nexport default Controls\r\n","import { Engine } from \"../../../controller/Engine\"\r\n\r\nexport function save() {\r\n    return Engine.trySave()\r\n        .then(() => Engine.tryLoad())\r\n        .catch(e => console.error(e))\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { TState } from '../../../../redux/store/reducer';\r\n\r\ninterface HistogramSVGProps{\r\n    height?: number\r\n}\r\n\r\nexport const HistogramSVG: React.FC<HistogramSVGProps> = ({ height = 500 }) => {\r\n    const maxBin = useSelector((store: TState) => store.graph.histogram.maxBin || 0)\r\n    const bins = useSelector((store: TState) => store.graph.histogram.bins)\r\n    if (!Array.isArray(bins)) { return <svg /> }\r\n\r\n    // const mainHeight = Math.round(maxBin * 1.5 + 20)\r\n    const mainHeight = height\r\n    const PADDING = 50\r\n    const BAR_WIDTH = 10\r\n    const GAP = 3\r\n\r\n    const xStep = BAR_WIDTH + GAP\r\n    const maxHeight = mainHeight - PADDING * 2\r\n    const mainWidth = bins.length * (BAR_WIDTH + GAP) + PADDING * 2\r\n\r\n    /** генерирует столбцы гистограмы. Они растут вверх отступая от нижней границы экрана и боков на PADDING */\r\n    function getRects() {\r\n        return bins.map((bin, i) => {\r\n            const height = bin * maxHeight\r\n            return <g key={i}>\r\n                <rect\r\n                    x={`${i * xStep + PADDING}`}\r\n                    y={`${mainHeight - height - PADDING}`}\r\n                    width={`${BAR_WIDTH}`}\r\n                    height={`${height}`}\r\n                />\r\n                {!(i % 5) && getText(i)}\r\n            </g>\r\n        })\r\n    }\r\n\r\n    function getText(i: number) {\r\n        return <text\r\n            x={`${i * xStep + PADDING + BAR_WIDTH / 2}`}\r\n            y={`${mainHeight - PADDING / 2}`}\r\n            textAnchor='middle'\r\n        >{`${i}`}</text>\r\n    }\r\n\r\n    function getYScale() {\r\n        const x = PADDING / 2\r\n        const half = maxBin / 2\r\n        const yTop = mainHeight - PADDING - maxHeight\r\n        const yMiddle = mainHeight - PADDING - maxHeight / 2\r\n        const yBottom = mainHeight - PADDING\r\n\r\n        return <g stroke=\"rgba(74, 157, 255, .4)\">\r\n            <text x={`${x}`} textAnchor='middle'\r\n                y={`${yTop}`}\r\n            >{`${maxBin}`}</text>\r\n            <line x1={`${x}`}\r\n                x2={`${mainWidth - PADDING}`}\r\n                y1={`${yTop} `} y2={`${yTop}`}\r\n            />\r\n\r\n            <text x={`${x}`} textAnchor='middle'\r\n                y={`${yMiddle}`}\r\n            >{`${half}`}</text>\r\n            <line x1={`${x}`}\r\n                x2={`${mainWidth - PADDING}`}\r\n                y1={`${yMiddle} `} y2={`${yMiddle}`}\r\n            />\r\n\r\n            <text x={`${x}`} textAnchor='middle'\r\n                y={`${yBottom}`}\r\n            >0</text>\r\n            <line x1={`${x}`}\r\n                x2={`${mainWidth - PADDING}`}\r\n                y1={`${yBottom} `} y2={`${yBottom}`}\r\n            />\r\n        </g>\r\n    }\r\n\r\n    return <svg\r\n        width={`${mainWidth}`}\r\n        height={`${mainHeight}`}\r\n        textRendering=\"optimizeLegibility\"\r\n        version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n        <g fill=\"#4A9DFF\">\r\n            {getYScale()}\r\n            {getRects()}\r\n        </g>\r\n    </svg>\r\n}\r\n\r\nexport default HistogramSVG\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { TState } from '../../../redux/store/reducer';\r\nimport './Histogram.scss';\r\nimport { HistogramSVG } from './HistogramSVG/HistogramSVG';\r\n\r\nexport const Histogram: React.FC = () => {\r\n    const histogramIsExists = useSelector((store: TState) => !!store.graph.histogram.bins?.length)\r\n\r\n    return <div\r\n        className=\"histogram\"\r\n    >\r\n        {histogramIsExists && <HistogramSVG />}\r\n    </div>\r\n}\r\n\r\nexport default Histogram\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { TState } from '../../../redux/store/reducer';\r\nimport './Retention.scss';\r\n\r\nexport const Retention: React.FC = () => {\r\n    const retention = useSelector((store: TState) => store.graph.retention)\r\n    if (!Number.isFinite(retention)) { return <div /> }\r\n\r\n    return <div\r\n        className=\"retention\"\r\n    >\r\n        {`Rolling Retention 7 day: ${retention}`}\r\n    </div>\r\n}\r\n\r\nexport default Retention\r\n\r\n","import React from 'react';\r\nimport './Graph.scss';\r\nimport { Histogram } from './Histogram/Histogram';\r\nimport { Retention } from './Retention/Retention';\r\n\r\nexport const Graph: React.FC = () => {\r\n    return <div\r\n        className=\"graph\"\r\n    >\r\n        <Retention />\r\n        <Histogram />\r\n    </div>\r\n}\r\n\r\nexport default Graph\r\n\r\n","export function getHTMLDate(date: Date) {\r\n    if (!date?.getFullYear) { return '' }\r\n    return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`\r\n}\r\n\r\nexport function getDateFromHTML(date: string) {\r\n    if (!date?.split) { return new Date() }\r\n    const dateValues = date.trim().split('-').map(value => parseInt(value) || 0)\r\n    const newDate = new Date()\r\n    if (dateValues.length) {\r\n        newDate.setFullYear(dateValues[0], dateValues[1], dateValues[2])\r\n    }\r\n    return newDate\r\n}\r\n","import { getUsers } from \"../../../../controller/Engine/getters\";\r\nimport { UserActions } from \"../../../../redux/actions/UserActions\";\r\nimport { TUser } from \"../../../../redux/store/reducer/userReducer\";\r\n\r\nexport function updateUser(newUser: Partial<TUser>, index: number) {\r\n    const user = getUsers()[index]\r\n    if (!user) { return }\r\n    UserActions.updateUser({ ...user, ...newUser }, index)\r\n}\r\n","import React from 'react';\r\nimport './User.scss';\r\nimport { useSelector } from 'react-redux';\r\nimport { TState } from '../../../redux/store/reducer';\r\nimport { IBasicProps } from '../../../types/reactComponents/basic';\r\nimport { getDateFromHTML, getHTMLDate } from './dateParser/dateParser';\r\nimport { updateUser } from './eventHandlers/updateUser';\r\n\r\ninterface IUserProps extends IBasicProps{\r\n    index: number\r\n}\r\n\r\nexport const User: React.FC<IUserProps> = ({ index, requireCssClass }) => {\r\n    const isValid = useSelector((store: TState) => store.users[index]?.isValid)\r\n    const userId = useSelector((store: TState) => store.users[index]?.id)\r\n    const registration = useSelector((store: TState) => getHTMLDate(store.users[index]?.registration))\r\n    const lastActivity = useSelector((store: TState) => getHTMLDate(store.users[index]?.lastActivity))\r\n\r\n    const mainClass = requireCssClass + ' user' + (isValid === false ? ' user_invalid' : '')\r\n\r\n    return <tr className={mainClass}>\r\n        <td className={'user-item user-item_first'}>\r\n            <input\r\n                value={userId}\r\n                name=\"userId\"\r\n                onChange={event => { updateUser({ id: +event.target.value }, index) }}\r\n                type=\"number\"\r\n                className={'user-item-input user-item-input_clear'}\r\n                size={userId.toString().length + 1}\r\n                />\r\n        </td>\r\n        <td className={'user-item'}>\r\n            <input\r\n                value={registration}\r\n                name=\"registration\"\r\n                onChange={event => { updateUser({ registration: getDateFromHTML(event.target.value) }, index) }}\r\n                type=\"date\"\r\n                className={'user-item-input'}\r\n                />\r\n        </td>\r\n        <td className={'user-item user-item_last'}>\r\n            <input\r\n                value={lastActivity}\r\n                name=\"lastActivity\"\r\n                onChange={event => { updateUser({ lastActivity: getDateFromHTML(event.target.value) }, index) }}\r\n                type=\"date\"\r\n                className={'user-item-input'}\r\n            />\r\n        </td>\r\n    </tr>\r\n}\r\n\r\nexport default User\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { TState } from '../../redux/store/reducer';\r\nimport './Table.scss';\r\nimport { User } from './User/User';\r\n\r\nexport const Table: React.FC = () => {\r\n    const users = useSelector((store: TState) => store.users, (left, right) => left.length === right.length)\r\n\r\n    return <table className=\"table\">\r\n        <caption className=\"table-caption\">Users activity</caption>\r\n        <thead className=\"table-head\">\r\n            <tr>\r\n                <th className=\"table-head-item\" scope=\"col\">UserID</th>\r\n                <th className=\"table-head-item\" scope=\"col\">Date Registration</th>\r\n                <th className=\"table-head-item\" scope=\"col\">Date Last Activity</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody className={\"table-body\"}>{\r\n            users.map((user, index) => <User\r\n                requireCssClass='table-body-item'\r\n                index={index}\r\n                key={`table-${index}-${user.id}`}\r\n            />)\r\n        }</tbody>\r\n    </table>\r\n}\r\n\r\nexport default Table\r\n\r\n","import React from 'react';\r\nimport './App.scss';\r\nimport { Controls } from './Controls/Controls';\r\nimport { Graph } from './Graph/Graph';\r\nimport { Table } from './Table/Table';\r\n\r\nexport const App: React.FC = () => {\r\n  return <div className=\"app\">\r\n    <div className=\"app-data\">\r\n      <Table />\r\n      <Graph />\r\n    </div>\r\n    <Controls />\r\n  </div>\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './redux/store';\r\nimport { Engine } from './controller/Engine';\r\n\r\nEngine.init()\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>,\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}