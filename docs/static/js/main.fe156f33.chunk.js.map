{"version":3,"sources":["redux/store/reducer/grafReducer.ts","redux/store/reducer/userReducer.ts","redux/store/reducer.ts","redux/store.ts","redux/actions/UserActions.ts","app/Controls/AddUser/AddUser.ts","app/Controls/Controls.tsx","app/Graph/Graph.tsx","app/Table/User/dateParser/dateParser.ts","app/Table/User/User.tsx","app/Table/Table.tsx","app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["grafReducer","graph","action","type","payload","histogram","spline","ADD_USERS","userReducer","users","concat","defaultState","reducer","state","store","createStore","UserActions","dispatch","id","DAY","addUser","event","addUsers","count","i","push","registration","Date","lastActivity","getManyUsers","Controls","className","onClick","Graph","getHTMLDate","date","getFullYear","getMonth","toString","padStart","getDate","User","index","requireCssClass","user","useSelector","useState","userId","setUserId","setRegistration","setLastActivity","value","name","onChange","target","size","length","Table","left","right","scope","map","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fe156f33.chunk.js","sourcesContent":["import { TAction, TDefaultAction } from \"../reducer\"\r\n\r\nexport const REPLACE_HISTOGRAM = 'REPLACE_HISTOGRAM'\r\nexport const REPLACE_SPLINE = 'REPLACE_SPLINE'\r\n\r\nexport function grafReducer(graph: TGraph, action: TAction): TGraph {\r\n\r\n    if (action.type === REPLACE_HISTOGRAM && action.payload.histogram ) {\r\n        return { ...graph, histogram: action.payload.histogram }\r\n\r\n    } else if (action.type === REPLACE_SPLINE && action.payload.spline) {\r\n        return { ...graph, spline: action.payload.spline }\r\n    }\r\n\r\n    return graph\r\n}\r\n\r\nexport type TGraph = {\r\n    /** высоты столбцов гистограммы */\r\n    histogram: number[]\r\n    /** точки сшивки кривых безье */\r\n    spline: number[]\r\n}\r\n\r\nexport interface TGrafReducerAction extends TDefaultAction {\r\n    type: typeof REPLACE_HISTOGRAM | typeof REPLACE_SPLINE\r\n    payload: Partial<TGraph>\r\n}\r\n\r\nexport default grafReducer\r\n","import { TAction, TDefaultAction } from \"../reducer\"\r\n\r\nexport const ADD_USERS = 'ADD_USERS'\r\n\r\nexport function userReducer(users: TUsers, action: TAction) {\r\n    if (action.type === ADD_USERS) {\r\n        return users.concat(action.payload.users)\r\n    }\r\n    return users\r\n}\r\n\r\nexport type TUsers = TUser[]\r\n\r\nexport interface TUserReducerAction extends TDefaultAction {\r\n    type: typeof ADD_USERS\r\n    payload: {\r\n        // это не TUsers, этот тип не обязан меняться при изменении TUsers\r\n        users: TUser[]\r\n    }\r\n}\r\n\r\ntype TUser = {\r\n    id: number\r\n    registration: Date\r\n    lastActivity: Date\r\n}\r\n\r\nexport default userReducer\r\n","import { Reducer } from \"redux\"\r\nimport { grafReducer, TGrafReducerAction, TGraph } from \"./reducer/grafReducer\"\r\nimport { TUserReducerAction, TUsers, userReducer } from \"./reducer/userReducer\"\r\n\r\nexport interface TDefaultAction {\r\n    type: string\r\n    payload?: Record<string, any>\r\n}\r\n\r\nexport type TAction =\r\n    | TUserReducerAction\r\n    | TGrafReducerAction\r\n\r\nexport type TState = {\r\n    /** массив юзеров для таблицы */\r\n    users: TUsers\r\n    /** данные для отображения графиков */\r\n    graph: TGraph\r\n}\r\n\r\nconst defaultState: TState = {\r\n    users: [],\r\n    graph: {\r\n        histogram: [],\r\n        spline: [],\r\n    },\r\n}\r\n\r\nexport const reducer: Reducer<TState, TAction> = (state = defaultState, action) => {\r\n    return {\r\n        ...state,\r\n        users: userReducer(state.users, action),\r\n        graph: grafReducer(state.graph, action),\r\n    }\r\n}\r\n\r\nexport default reducer\r\n","import { createStore } from \"redux\";\r\nimport reducer from \"./store/reducer\";\r\n\r\nexport const store = createStore(reducer);\r\n\r\nexport default store\r\n","import { store } from \"../store\";\r\nimport { ADD_USERS, TUserReducerAction } from \"../store/reducer/userReducer\";\r\n\r\nexport class UserActions {\r\n    static addUsers(users: TUserReducerAction['payload']['users']) {\r\n        store.dispatch({\r\n            type: ADD_USERS,\r\n            payload: {\r\n                users\r\n            },\r\n        })\r\n    }\r\n}\r\n","import { UserActions } from \"../../../redux/actions/UserActions\";\r\n\r\nlet id = 0\r\n\r\nconst DAY = 24 * 60 * 60 * 1000\r\n\r\nexport const addUser: React.MouseEventHandler<HTMLButtonElement> = function (event) {\r\n    // UserActions.addUsers([\r\n    //     {\r\n    //         id: id,\r\n    //         registration: new Date(id++ * DAY),\r\n    //         lastActivity: new Date(),\r\n    //     },\r\n    // ])\r\n    UserActions.addUsers(getManyUsers())\r\n}\r\n\r\nfunction getManyUsers(count = 30) {\r\n    const users: Parameters<typeof UserActions['addUsers']>[0] = []\r\n\r\n    for (let i = 0; i < count; i++) {\r\n        users.push({\r\n            id: ++id,\r\n            registration: new Date(id * DAY),\r\n            lastActivity: new Date(),\r\n        })\r\n    }\r\n\r\n    return users\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { addUser } from './AddUser/AddUser';\r\nimport './Controls.scss';\r\nimport './button/button.scss';\r\n\r\nexport const Controls: React.FC = () => {\r\n    return <div\r\n        className=\"controls\"\r\n    >\r\n        <button\r\n            className='controls-button_add button'\r\n            type='button'\r\n            onClick={addUser}\r\n        >Add</button>\r\n        <button\r\n            className='controls-button_save button'\r\n            type='submit'\r\n        >Save</button>\r\n        <button\r\n            className='controls-button_calculate button'\r\n            type='button'\r\n        >Calculate</button>\r\n    </div>\r\n}\r\n\r\nexport default Controls\r\n\r\n","import React from 'react';\r\nimport './Graph.scss';\r\n\r\nexport const Graph: React.FC = () => {\r\n    return <div\r\n        className=\"graph\"\r\n    >\r\n        Graph\r\n    </div>\r\n}\r\n\r\nexport default Graph\r\n\r\n","export function getHTMLDate(date: Date) {\r\n    return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`\r\n}\r\n\r\nexport function getDateFromHTML(date: string) {\r\n    const dateValues = date.trim().split('-').map(value => parseInt(value.trim()) || 0)\r\n    const newDate = new Date()\r\n    if (dateValues.length >= 3) {\r\n        newDate.setFullYear(dateValues[0])\r\n        newDate.setMonth(dateValues[1])\r\n        newDate.setDate(dateValues[2])\r\n    }\r\n    return newDate\r\n}\r\n","import React, { useState } from 'react';\r\nimport './User.scss';\r\nimport { useSelector } from 'react-redux';\r\nimport { TState } from '../../../redux/store/reducer';\r\nimport { IBasicProps } from '../../../types/reactComponents/basic';\r\nimport { getHTMLDate } from './dateParser/dateParser';\r\n\r\ninterface IUserProps extends IBasicProps{\r\n    index: number\r\n}\r\n\r\nexport const User: React.FC<IUserProps> = ({ index, requireCssClass }) => {\r\n    const user = useSelector((store: TState) => store.users[index])\r\n\r\n    const [userId, setUserId] = useState(user.id)\r\n    const [registration, setRegistration] = useState(getHTMLDate(user.registration))\r\n    const [lastActivity, setLastActivity] = useState(getHTMLDate(user.lastActivity))\r\n\r\n    if (!user) { return null }\r\n\r\n    return <tr className={requireCssClass + ' user'}>\r\n        <td className={'user-item user-item_first'}>\r\n            <input\r\n                value={userId}\r\n                name=\"userId\"\r\n                onChange={event => setUserId(+event.target.value)}\r\n                type=\"number\"\r\n                className={'user-item-input user-item-input_clear'}\r\n                size={userId.toString().length + 1}\r\n            />\r\n        </td>\r\n        <td className={'user-item'}>\r\n            <input\r\n                value={registration}\r\n                name=\"registration\"\r\n                onChange={event => setRegistration(event.target.value)}\r\n                type=\"date\"\r\n                className={'user-item-input'}\r\n            />\r\n        </td>\r\n        <td className={'user-item user-item_last'}>\r\n            <input\r\n                value={lastActivity}\r\n                name=\"lastActivity\"\r\n                onChange={event => setLastActivity(event.target.value)}\r\n                type=\"date\"\r\n                className={'user-item-input'}\r\n            />\r\n        </td>\r\n    </tr>\r\n}\r\n\r\nexport default User\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { TState } from '../../redux/store/reducer';\r\nimport './Table.scss';\r\nimport { User } from './User/User';\r\n\r\nexport const Table: React.FC = () => {\r\n    const users = useSelector((store: TState) => store.users, (left, right) => left.length === right.length)\r\n\r\n    return <table className=\"table\">\r\n        <caption className=\"table-caption\">Users activity</caption>\r\n        <thead className=\"table-head\">\r\n            <tr>\r\n                <th className=\"table-head-item\" scope=\"col\">UserID</th>\r\n                <th className=\"table-head-item\" scope=\"col\">Date Registration</th>\r\n                <th className=\"table-head-item\" scope=\"col\">Date Last Activity</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody className={\"table-body\"}>{\r\n            users.map((user, index) => <User requireCssClass='table-body-item' index={index} key={user.id} />)\r\n        }</tbody>\r\n    </table>\r\n}\r\n\r\nexport default Table\r\n\r\n","import React from 'react';\r\nimport './App.scss';\r\nimport { Controls } from './Controls/Controls';\r\nimport { Graph } from './Graph/Graph';\r\nimport { Table } from './Table/Table';\r\n\r\nexport const App: React.FC = () => {\r\n  return <div className=\"app\">\r\n    <div className=\"app-data\">\r\n      <Table />\r\n      <Graph />\r\n    </div>\r\n    <Controls />\r\n  </div>\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './redux/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>,\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}