{"version":3,"sources":["api/FirebaseController/Firebase/init.ts","api/FirebaseController/Firebase.ts","api/FirebaseController.ts","redux/store/reducer/grafReducer.ts","redux/store/reducer/userReducer.ts","redux/store/reducer.ts","redux/store.ts","redux/actions/UserActions.ts","controller/Engine/getters.ts","controller/Engine.ts","controller/Engine/converters.ts","app/Controls/EventHandlers/Save.ts","app/Controls/EventHandlers/AddUser.ts","app/Controls/Controls.tsx","app/Graph/Graph.tsx","app/Table/User/dateParser/dateParser.ts","app/Table/User/User.tsx","app/Table/Table.tsx","app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","selfFirestore","getFirestore","Firebase","collectionName","this","collections","has","set","firestore","get","collection","data","getCollection","id","getFirestoreDocs","then","result","docs","map","doc","ref","docRefs","forEach","Map","USERS","FirebaseController","getDocs","bdUsers","sort","a","b","deleteCollection","Promise","all","bdUser","add","grafReducer","graph","action","type","payload","histogram","spline","ADD_USERS","REPLACE_USERS","userReducer","users","concat","defaultState","reducer","state","store","createStore","UserActions","dispatch","getUsers","getState","Engine","safetyLoad","validate","Error","reduxUsers","reduxUser","registration","getTime","lastActivity","saveAll","load","Date","convertToReduxUsers","replaceUsers","tryLoad","catch","e","console","error","save","event","trySave","DAY","addUser","addUsers","count","Array","isArray","length","i","push","getManyUsers","Controls","className","onClick","Graph","getHTMLDate","date","getFullYear","getMonth","toString","padStart","getDate","User","index","requireCssClass","user","useSelector","useState","userId","setUserId","setRegistration","setLastActivity","value","name","onChange","target","size","Table","left","right","scope","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","init","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.59c24afa.chunk.js","sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\n\r\nexport const app = initializeApp({\r\n    apiKey: \"AIzaSyAy2GjQAfutCFa3toa9WLDFTkMehtj_CNk\",\r\n    authDomain: \"useractivity-4c085.firebaseapp.com\",\r\n    projectId: \"useractivity-4c085\",\r\n    storageBucket: \"useractivity-4c085.appspot.com\",\r\n    messagingSenderId: \"1007647890248\",\r\n    appId: \"1:1007647890248:web:91e91fec7ca033ae29b17d\"\r\n})\r\n\r\nexport const selfFirestore = getFirestore(app)\r\n\r\n","import * as firestore from \"firebase/firestore\";\r\nimport { DocumentData } from \"firebase/firestore\";\r\nimport { selfFirestore } from \"./Firebase/init\";\r\n\r\nexport class Firebase{\r\n    // private static readonly app = app\r\n\r\n    private static readonly selfFirestore = selfFirestore\r\n    public static readonly firestore = firestore\r\n\r\n    private static readonly collections: Map<string, ReturnType<typeof firestore['collection']>> = new Map()\r\n    protected static getCollection(collectionName: string) {\r\n        if (!this.collections.has(collectionName)) {\r\n            this.collections.set(collectionName, firestore.collection(this.selfFirestore, collectionName))\r\n        }\r\n        return this.collections.get(collectionName)!\r\n    }\r\n\r\n    public static add<T extends Record<string, number | string>>(collection: string, data: T) {\r\n        return firestore.addDoc(this.getCollection(collection), data)\r\n    }\r\n\r\n    protected static getFirestoreDocs(collection: string) {\r\n        return firestore.getDocs(firestore.collectionGroup(this.selfFirestore, this.getCollection(collection).id))\r\n    }\r\n\r\n    /** получает все документы коллекции, затем их все удаляет */\r\n    public static deleteCollection(collection: string) {\r\n        return this.getFirestoreDocs(collection)\r\n        .then(result => result.docs.map(doc => doc.ref))\r\n        .then(docRefs => docRefs.forEach(ref => firestore.deleteDoc(ref)))\r\n    }\r\n\r\n    /** возвращает все документы коллекции */\r\n    public static getDocs<T extends DocumentData = DocumentData>(collection: string) {\r\n        return this.getFirestoreDocs(collection)\r\n            .then(result => result.docs\r\n                .map(doc => doc.data() as T)\r\n            )\r\n    }\r\n}\r\n\r\n","import { TBdUsers } from \"../types/reactComponents/basic\";\r\nimport { Firebase } from \"./FirebaseController/Firebase\";\r\n\r\nconst USERS = 'users'\r\n\r\nexport class FirebaseController{\r\n    /** загружает и возвращает данные из коллекции users */\r\n    public static load() {\r\n        return Firebase.getDocs<TBdUsers[0]>(USERS)\r\n            .then(bdUsers => bdUsers.sort((a, b) => a.id - b.id))\r\n    }\r\n\r\n    /** очищает коллекцию users и сохраняет в неё переданный массив */\r\n    public static saveAll(bdUsers: TBdUsers) {\r\n        return Firebase.deleteCollection(USERS)\r\n            .then(() => Promise.all(bdUsers\r\n                .map(bdUser => Firebase.add(USERS, bdUser))))\r\n    }\r\n}\r\n","import { TAction, TDefaultAction } from \"../reducer\"\r\n\r\nexport const REPLACE_HISTOGRAM = 'REPLACE_HISTOGRAM'\r\nexport const REPLACE_SPLINE = 'REPLACE_SPLINE'\r\n\r\nexport function grafReducer(graph: TGraph, action: TAction): TGraph {\r\n\r\n    if (action.type === REPLACE_HISTOGRAM && action.payload.histogram ) {\r\n        return { ...graph, histogram: action.payload.histogram }\r\n\r\n    } else if (action.type === REPLACE_SPLINE && action.payload.spline) {\r\n        return { ...graph, spline: action.payload.spline }\r\n    }\r\n\r\n    return graph\r\n}\r\n\r\nexport type TGraph = {\r\n    /** высоты столбцов гистограммы */\r\n    histogram: number[]\r\n    /** точки сшивки кривых безье */\r\n    spline: number[]\r\n}\r\n\r\nexport interface TGrafReducerAction extends TDefaultAction {\r\n    type: typeof REPLACE_HISTOGRAM | typeof REPLACE_SPLINE\r\n    payload: Partial<TGraph>\r\n}\r\n\r\nexport default grafReducer\r\n","import { TAction, TDefaultAction } from \"../reducer\"\r\n\r\nexport const ADD_USERS = 'ADD_USERS'\r\nexport const REPLACE_USERS = 'REPLACE_USERS'\r\n\r\nexport function userReducer(users: TUsers, action: TAction) {\r\n    if (action.type === ADD_USERS) {\r\n        return users.concat(action.payload.users)\r\n    } else if (action.type === REPLACE_USERS) {\r\n        return [...action.payload.users]\r\n    }\r\n    return users\r\n}\r\n\r\n/** поле в redux. Этот тип можно модифицировать */\r\nexport type TUsers = TUser[]\r\n\r\n/** просто массив юзеров. Этот тип нельзя модифицировать */\r\nexport type ArrayOfUser = TUser[]\r\n\r\nexport interface TUserReducerAction extends TDefaultAction {\r\n    type: typeof ADD_USERS | typeof REPLACE_USERS\r\n    payload: {\r\n        // это не TUsers, этот тип не обязан меняться при изменении TUsers\r\n        users: ArrayOfUser\r\n    }\r\n}\r\n\r\ntype TUser = {\r\n    id: number\r\n    registration: Date\r\n    lastActivity: Date\r\n}\r\n\r\nexport default userReducer\r\n","import { Reducer } from \"redux\"\r\nimport { grafReducer, TGrafReducerAction, TGraph } from \"./reducer/grafReducer\"\r\nimport { TUserReducerAction, TUsers, userReducer } from \"./reducer/userReducer\"\r\n\r\nexport interface TDefaultAction {\r\n    type: string\r\n    payload?: Record<string, any>\r\n}\r\n\r\nexport type TAction =\r\n    | TUserReducerAction\r\n    | TGrafReducerAction\r\n\r\nexport type TState = {\r\n    /** массив юзеров для таблицы */\r\n    users: TUsers\r\n    /** данные для отображения графиков */\r\n    graph: TGraph\r\n}\r\n\r\nconst defaultState: TState = {\r\n    users: [],\r\n    graph: {\r\n        histogram: [],\r\n        spline: [],\r\n    },\r\n}\r\n\r\nexport const reducer: Reducer<TState, TAction> = (state = defaultState, action) => {\r\n    return {\r\n        ...state,\r\n        users: userReducer(state.users, action),\r\n        graph: grafReducer(state.graph, action),\r\n    }\r\n}\r\n\r\nexport default reducer\r\n","import { createStore } from \"redux\";\r\nimport reducer from \"./store/reducer\";\r\n\r\nexport const store = createStore(reducer);\r\n\r\nexport default store\r\n","import { store } from \"../store\";\r\nimport { ADD_USERS, REPLACE_USERS, TUserReducerAction } from \"../store/reducer/userReducer\";\r\n\r\nexport class UserActions {\r\n    static addUsers(users: TUserReducerAction['payload']['users']) {\r\n        store.dispatch({\r\n            type: ADD_USERS,\r\n            payload: {\r\n                users\r\n            },\r\n        })\r\n    }\r\n\r\n    static replaceUsers(users: TUserReducerAction['payload']['users']) {\r\n        store.dispatch({\r\n            type: REPLACE_USERS,\r\n            payload: {\r\n                users\r\n            },\r\n        })\r\n    }\r\n}\r\n","import { store } from \"../../redux/store\";\r\n\r\nexport function getUsers() {\r\n    return store.getState().users\r\n}\r\n","import { FirebaseController } from \"../api/FirebaseController\";\r\nimport { UserActions } from \"../redux/actions/UserActions\";\r\nimport { convertToBdUsers, convertToReduxUsers } from \"./Engine/converters\";\r\nimport { getUsers } from \"./Engine/getters\";\r\n\r\nexport class Engine{\r\n    public static init() {\r\n        return this.safetyLoad()\r\n    }\r\n\r\n    public static validate() {\r\n        return true\r\n    }\r\n\r\n    public static async trySave() {\r\n        if (!this.validate()) { throw new Error(\"invalid users data\") }\r\n\r\n        const bdUsers = convertToBdUsers(getUsers())\r\n        return FirebaseController.saveAll(bdUsers)\r\n    }\r\n\r\n    public static tryLoad() {\r\n        return FirebaseController.load()\r\n            .then(bdUsers => convertToReduxUsers(bdUsers))\r\n            .then(reduxUsers => UserActions.replaceUsers(reduxUsers))\r\n    }\r\n\r\n    public static safetyLoad() {\r\n        return this.tryLoad()\r\n            .catch(e => console.error(e))\r\n    }\r\n}\r\n","import { ArrayOfUser } from \"../../redux/store/reducer/userReducer\";\r\nimport { TBdUsers } from \"../../types/reactComponents/basic\";\r\n\r\nexport function convertToReduxUsers(bdUsers: TBdUsers) {\r\n    return bdUsers.map(bdUser => ({\r\n        ...bdUser,\r\n        registration: new Date(bdUser.registration),\r\n        lastActivity: new Date(bdUser.lastActivity),\r\n    })) as ArrayOfUser\r\n}\r\n\r\nexport function convertToBdUsers(reduxUsers: ArrayOfUser) {\r\n    return reduxUsers.map(reduxUser => ({\r\n        ...reduxUser,\r\n        registration: reduxUser.registration.getTime(),\r\n        lastActivity: reduxUser.lastActivity.getTime(),\r\n    })) as TBdUsers\r\n}\r\n","import { Engine } from \"../../../controller/Engine\"\r\n\r\nexport const save: React.MouseEventHandler<HTMLButtonElement> = function (event) {\r\n    Engine.trySave()\r\n        .then(() => Engine.tryLoad())\r\n        .catch(e => console.error(e))\r\n}\r\n\r\n\r\n","import { getUsers } from \"../../../controller/Engine/getters\";\r\nimport { UserActions } from \"../../../redux/actions/UserActions\";\r\n\r\nlet id = 0\r\n\r\nconst DAY = 24 * 60 * 60 * 1000\r\n\r\nexport const addUser: React.MouseEventHandler<HTMLButtonElement> = function (event) {\r\n    // UserActions.addUsers([\r\n    //     {\r\n    //         id: id,\r\n    //         registration: new Date(id++ * DAY),\r\n    //         lastActivity: new Date(),\r\n    //     },\r\n    // ])\r\n    UserActions.addUsers(getManyUsers())\r\n}\r\n\r\nfunction getManyUsers(count = 30) {\r\n    const reduxUsers = getUsers()\r\n    if (Array.isArray(reduxUsers) && reduxUsers.length > 0) {\r\n        id = reduxUsers[reduxUsers.length - 1]?.id || id\r\n    }\r\n\r\n    const users: Parameters<typeof UserActions['addUsers']>[0] = []\r\n\r\n    for (let i = 0; i < count; i++) {\r\n        users.push({\r\n            id: ++id,\r\n            registration: new Date(id * DAY),\r\n            lastActivity: new Date(),\r\n        })\r\n    }\r\n\r\n    return users\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport './Controls.scss';\r\nimport './button/button.scss';\r\nimport { save } from './EventHandlers/Save';\r\nimport { addUser } from './EventHandlers/AddUser';\r\n\r\nexport const Controls: React.FC = () => {\r\n    return <div\r\n        className=\"controls\"\r\n    >\r\n        <button\r\n            className='controls-button_add button'\r\n            type='button'\r\n            onClick={addUser}\r\n            >Add</button>\r\n        <button\r\n            className='controls-button_save button'\r\n            type='submit'\r\n            onClick={save}\r\n            >Save</button>\r\n        <button\r\n            className='controls-button_calculate button'\r\n            type='button'\r\n            onClick={save}\r\n        >Calculate</button>\r\n    </div>\r\n}\r\n\r\nexport default Controls\r\n","import React from 'react';\r\nimport './Graph.scss';\r\n\r\nexport const Graph: React.FC = () => {\r\n    return <div\r\n        className=\"graph\"\r\n    >\r\n        Graph\r\n    </div>\r\n}\r\n\r\nexport default Graph\r\n\r\n","export function getHTMLDate(date: Date) {\r\n    return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`\r\n}\r\n\r\nexport function getDateFromHTML(date: string) {\r\n    const dateValues = date.trim().split('-').map(value => parseInt(value.trim()) || 0)\r\n    const newDate = new Date()\r\n    if (dateValues.length >= 3) {\r\n        newDate.setFullYear(dateValues[0])\r\n        newDate.setMonth(dateValues[1])\r\n        newDate.setDate(dateValues[2])\r\n    }\r\n    return newDate\r\n}\r\n","import React, { useState } from 'react';\r\nimport './User.scss';\r\nimport { useSelector } from 'react-redux';\r\nimport { TState } from '../../../redux/store/reducer';\r\nimport { IBasicProps } from '../../../types/reactComponents/basic';\r\nimport { getHTMLDate } from './dateParser/dateParser';\r\n\r\ninterface IUserProps extends IBasicProps{\r\n    index: number\r\n}\r\n\r\nexport const User: React.FC<IUserProps> = ({ index, requireCssClass }) => {\r\n    const user = useSelector((store: TState) => store.users[index])\r\n\r\n    const [userId, setUserId] = useState(user.id)\r\n    const [registration, setRegistration] = useState(getHTMLDate(user.registration))\r\n    const [lastActivity, setLastActivity] = useState(getHTMLDate(user.lastActivity))\r\n\r\n    if (!user) { return null }\r\n\r\n    return <tr className={requireCssClass + ' user'}>\r\n        <td className={'user-item user-item_first'}>\r\n            <input\r\n                value={userId}\r\n                name=\"userId\"\r\n                onChange={event => setUserId(+event.target.value)}\r\n                type=\"number\"\r\n                className={'user-item-input user-item-input_clear'}\r\n                size={userId.toString().length + 1}\r\n            />\r\n        </td>\r\n        <td className={'user-item'}>\r\n            <input\r\n                value={registration}\r\n                name=\"registration\"\r\n                onChange={event => setRegistration(event.target.value)}\r\n                type=\"date\"\r\n                className={'user-item-input'}\r\n            />\r\n        </td>\r\n        <td className={'user-item user-item_last'}>\r\n            <input\r\n                value={lastActivity}\r\n                name=\"lastActivity\"\r\n                onChange={event => setLastActivity(event.target.value)}\r\n                type=\"date\"\r\n                className={'user-item-input'}\r\n            />\r\n        </td>\r\n    </tr>\r\n}\r\n\r\nexport default User\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { TState } from '../../redux/store/reducer';\r\nimport './Table.scss';\r\nimport { User } from './User/User';\r\n\r\nexport const Table: React.FC = () => {\r\n    const users = useSelector((store: TState) => store.users, (left, right) => left.length === right.length)\r\n\r\n    return <table className=\"table\">\r\n        <caption className=\"table-caption\">Users activity</caption>\r\n        <thead className=\"table-head\">\r\n            <tr>\r\n                <th className=\"table-head-item\" scope=\"col\">UserID</th>\r\n                <th className=\"table-head-item\" scope=\"col\">Date Registration</th>\r\n                <th className=\"table-head-item\" scope=\"col\">Date Last Activity</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody className={\"table-body\"}>{\r\n            users.map((user, index) => <User\r\n                requireCssClass='table-body-item'\r\n                index={index}\r\n                key={`table-${index}-${user.id}`}\r\n            />)\r\n        }</tbody>\r\n    </table>\r\n}\r\n\r\nexport default Table\r\n\r\n","import React from 'react';\r\nimport './App.scss';\r\nimport { Controls } from './Controls/Controls';\r\nimport { Graph } from './Graph/Graph';\r\nimport { Table } from './Table/Table';\r\n\r\nexport const App: React.FC = () => {\r\n  return <div className=\"app\">\r\n    <div className=\"app-data\">\r\n      <Table />\r\n      <Graph />\r\n    </div>\r\n    <Controls />\r\n  </div>\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './redux/store';\r\nimport { Engine } from './controller/Engine';\r\n\r\nEngine.init()\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>,\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}