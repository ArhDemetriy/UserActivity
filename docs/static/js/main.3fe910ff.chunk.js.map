{"version":3,"sources":["api/FirebaseController/Firebase/init.ts","api/FirebaseController/Firebase.ts","api/FirebaseController.ts","redux/store/reducer/grafReducer.ts","redux/store/reducer/userReducer.ts","redux/store/reducer.ts","redux/store.ts","redux/actions/UserActions.ts","controller/Engine/getters.ts","controller/Engine.ts","controller/Engine/converters.ts","app/Controls/EventHandlers/AddUser.ts","redux/actions/GraphActions.ts","controller/Retention.ts","app/Controls/EventHandlers/Calculate.ts","app/Controls/Controls.tsx","app/Controls/EventHandlers/Save.ts","app/Graph/Retention/Retention.tsx","app/Graph/Graph.tsx","app/Table/User/dateParser/dateParser.ts","app/Table/User/User.tsx","app/Table/Table.tsx","app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","selfFirestore","getFirestore","Firebase","collectionName","this","collections","has","set","firestore","get","collection","data","getCollection","id","getFirestoreDocs","then","result","docs","map","doc","ref","docRefs","forEach","Map","USERS","FirebaseController","getDocs","bdUsers","sort","a","b","deleteCollection","Promise","all","bdUser","add","REPLACE_HISTOGRAM","REPLACE_SPLINE","SET_RETENTION","grafReducer","graph","action","type","payload","histogram","spline","undefined","retention","ADD_USERS","REPLACE_USERS","userReducer","users","concat","defaultState","NaN","reducer","state","store","createStore","UserActions","dispatch","getUsers","getState","Engine","safetyLoad","validate","Error","reduxUsers","reduxUser","registration","getTime","lastActivity","saveAll","load","Date","convertToReduxUsers","replaceUsers","tryLoad","catch","e","console","error","DAY","addUser","event","addUsers","count","Array","isArray","length","i","push","getManyUsers","GraphActions","histogramSlice","Retention","retention7","getRollingRetention","Number","isFinite","setRetention","days","intervalTime","floorTime","getIntervalTime","now","returns","news","user","time","calculate","calcRetention","Controls","useState","loading","setLoading","className","disabled","onClick","trySave","finally","useSelector","Graph","getHTMLDate","date","getFullYear","getMonth","toString","padStart","getDate","User","index","requireCssClass","userId","setUserId","setRegistration","setLastActivity","value","name","onChange","target","size","Table","left","right","scope","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","init","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3fe910ff.chunk.js","sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\n\r\nexport const app = initializeApp({\r\n    apiKey: \"AIzaSyAy2GjQAfutCFa3toa9WLDFTkMehtj_CNk\",\r\n    authDomain: \"useractivity-4c085.firebaseapp.com\",\r\n    projectId: \"useractivity-4c085\",\r\n    storageBucket: \"useractivity-4c085.appspot.com\",\r\n    messagingSenderId: \"1007647890248\",\r\n    appId: \"1:1007647890248:web:91e91fec7ca033ae29b17d\"\r\n})\r\n\r\nexport const selfFirestore = getFirestore(app)\r\n\r\n","import * as firestore from \"firebase/firestore\";\r\nimport { DocumentData } from \"firebase/firestore\";\r\nimport { selfFirestore } from \"./Firebase/init\";\r\n\r\nexport class Firebase{\r\n    // private static readonly app = app\r\n\r\n    private static readonly selfFirestore = selfFirestore\r\n    public static readonly firestore = firestore\r\n\r\n    private static readonly collections: Map<string, ReturnType<typeof firestore['collection']>> = new Map()\r\n    protected static getCollection(collectionName: string) {\r\n        if (!this.collections.has(collectionName)) {\r\n            this.collections.set(collectionName, firestore.collection(this.selfFirestore, collectionName))\r\n        }\r\n        return this.collections.get(collectionName)!\r\n    }\r\n\r\n    public static add<T extends Record<string, number | string>>(collection: string, data: T) {\r\n        return firestore.addDoc(this.getCollection(collection), data)\r\n    }\r\n\r\n    protected static getFirestoreDocs(collection: string) {\r\n        return firestore.getDocs(firestore.collectionGroup(this.selfFirestore, this.getCollection(collection).id))\r\n    }\r\n\r\n    /** получает все документы коллекции, затем их все удаляет */\r\n    public static deleteCollection(collection: string) {\r\n        return this.getFirestoreDocs(collection)\r\n        .then(result => result.docs.map(doc => doc.ref))\r\n        .then(docRefs => docRefs.forEach(ref => firestore.deleteDoc(ref)))\r\n    }\r\n\r\n    /** возвращает все документы коллекции */\r\n    public static getDocs<T extends DocumentData = DocumentData>(collection: string) {\r\n        return this.getFirestoreDocs(collection)\r\n            .then(result => result.docs\r\n                .map(doc => doc.data() as T)\r\n            )\r\n    }\r\n}\r\n\r\n","import { TBdUsers } from \"../types/reactComponents/basic\";\r\nimport { Firebase } from \"./FirebaseController/Firebase\";\r\n\r\nconst USERS = 'users'\r\n\r\nexport class FirebaseController{\r\n    /** загружает и возвращает данные из коллекции users */\r\n    public static load() {\r\n        return Firebase.getDocs<TBdUsers[0]>(USERS)\r\n            .then(bdUsers => bdUsers.sort((a, b) => a.id - b.id))\r\n    }\r\n\r\n    /** очищает коллекцию users и сохраняет в неё переданный массив */\r\n    public static saveAll(bdUsers: TBdUsers) {\r\n        return Firebase.deleteCollection(USERS)\r\n            .then(() => Promise.all(bdUsers\r\n                .map(bdUser => Firebase.add(USERS, bdUser))))\r\n    }\r\n}\r\n","import { TAction, TDefaultAction } from \"../reducer\"\r\n\r\nexport const REPLACE_HISTOGRAM = 'REPLACE_HISTOGRAM'\r\nexport const REPLACE_SPLINE = 'REPLACE_SPLINE'\r\nexport const SET_RETENTION = 'SET_RETENTION'\r\n\r\nexport function grafReducer(graph: TGraph, action: TAction): TGraph {\r\n\r\n    if (action.type === REPLACE_HISTOGRAM && action.payload.histogram ) {\r\n        return { ...graph, histogram: action.payload.histogram }\r\n    } else if (action.type === REPLACE_SPLINE && action.payload.spline) {\r\n        return { ...graph, spline: action.payload.spline }\r\n    } else if (action.type === SET_RETENTION && action.payload.retention !== undefined) {\r\n        return { ...graph, retention: +action.payload.retention }\r\n    }\r\n\r\n    return graph\r\n}\r\n\r\nexport type TGraph = {\r\n    retention: number\r\n    /** высоты столбцов гистограммы */\r\n    histogram: number[]\r\n    /** точки сшивки кривых безье */\r\n    spline: number[]\r\n}\r\n\r\nexport interface TGrafReducerAction extends TDefaultAction {\r\n    type: typeof REPLACE_HISTOGRAM | typeof REPLACE_SPLINE | typeof SET_RETENTION\r\n    payload: Partial<TGraph>\r\n}\r\n\r\nexport default grafReducer\r\n","import { TAction, TDefaultAction } from \"../reducer\"\r\n\r\nexport const ADD_USERS = 'ADD_USERS'\r\nexport const REPLACE_USERS = 'REPLACE_USERS'\r\n\r\nexport function userReducer(users: TUsers, action: TAction) {\r\n    if (action.type === ADD_USERS) {\r\n        return users.concat(action.payload.users)\r\n    } else if (action.type === REPLACE_USERS) {\r\n        return [...action.payload.users]\r\n    }\r\n    return users\r\n}\r\n\r\n/** поле в redux. Этот тип можно модифицировать */\r\nexport type TUsers = TUser[]\r\n\r\n/** просто массив юзеров. Этот тип нельзя модифицировать */\r\nexport type ArrayOfUser = TUser[]\r\n\r\nexport interface TUserReducerAction extends TDefaultAction {\r\n    type: typeof ADD_USERS | typeof REPLACE_USERS\r\n    payload: {\r\n        users: TUsers\r\n    }\r\n}\r\n\r\ntype TUser = {\r\n    id: number\r\n    registration: Date\r\n    lastActivity: Date\r\n}\r\n\r\nexport default userReducer\r\n","import { Reducer } from \"redux\"\r\nimport { grafReducer, TGrafReducerAction, TGraph } from \"./reducer/grafReducer\"\r\nimport { TUserReducerAction, TUsers, userReducer } from \"./reducer/userReducer\"\r\n\r\nexport interface TDefaultAction {\r\n    type: string\r\n    payload?: Record<string, any>\r\n}\r\n\r\nexport type TAction =\r\n    | TUserReducerAction\r\n    | TGrafReducerAction\r\n\r\nexport type TState = {\r\n    /** массив юзеров для таблицы */\r\n    users: TUsers\r\n    /** данные для отображения графиков */\r\n    graph: TGraph\r\n}\r\n\r\nconst defaultState: TState = {\r\n    users: [],\r\n    graph: {\r\n        retention: NaN,\r\n        histogram: [],\r\n        spline: [],\r\n    },\r\n}\r\n\r\nexport const reducer: Reducer<TState, TAction> = (state = defaultState, action) => {\r\n    return {\r\n        ...state,\r\n        users: userReducer(state.users, action),\r\n        graph: grafReducer(state.graph, action),\r\n    }\r\n}\r\n\r\nexport default reducer\r\n","import { createStore } from \"redux\";\r\nimport reducer from \"./store/reducer\";\r\n\r\nexport const store = createStore(reducer);\r\n\r\nexport default store\r\n","import { store } from \"../store\";\r\nimport { ADD_USERS, REPLACE_USERS, TUserReducerAction } from \"../store/reducer/userReducer\";\r\n\r\nexport class UserActions {\r\n    static addUsers(users: TUserReducerAction['payload']['users']) {\r\n        store.dispatch({\r\n            type: ADD_USERS,\r\n            payload: {\r\n                users\r\n            },\r\n        })\r\n    }\r\n\r\n    static replaceUsers(users: TUserReducerAction['payload']['users']) {\r\n        store.dispatch({\r\n            type: REPLACE_USERS,\r\n            payload: {\r\n                users\r\n            },\r\n        })\r\n    }\r\n}\r\n","import { store } from \"../../redux/store\";\r\n\r\nexport function getUsers() {\r\n    return store.getState().users\r\n}\r\n","import { FirebaseController } from \"../api/FirebaseController\";\r\nimport { UserActions } from \"../redux/actions/UserActions\";\r\nimport { convertToBdUsers, convertToReduxUsers } from \"./Engine/converters\";\r\nimport { getUsers } from \"./Engine/getters\";\r\n\r\nexport class Engine{\r\n    public static init() {\r\n        return this.safetyLoad()\r\n    }\r\n\r\n    public static validate() {\r\n        return true\r\n    }\r\n\r\n    public static async trySave() {\r\n        if (!this.validate()) { throw new Error(\"invalid users data\") }\r\n\r\n        const bdUsers = convertToBdUsers(getUsers())\r\n        return FirebaseController.saveAll(bdUsers)\r\n    }\r\n\r\n    public static tryLoad() {\r\n        return FirebaseController.load()\r\n            .then(bdUsers => convertToReduxUsers(bdUsers))\r\n            .then(reduxUsers => UserActions.replaceUsers(reduxUsers))\r\n    }\r\n\r\n    public static safetyLoad() {\r\n        return this.tryLoad()\r\n            .catch(e => console.error(e))\r\n    }\r\n}\r\n","import { ArrayOfUser } from \"../../redux/store/reducer/userReducer\";\r\nimport { TBdUsers } from \"../../types/reactComponents/basic\";\r\n\r\nexport function convertToReduxUsers(bdUsers: TBdUsers) {\r\n    return bdUsers.map(bdUser => ({\r\n        ...bdUser,\r\n        registration: new Date(bdUser.registration),\r\n        lastActivity: new Date(bdUser.lastActivity),\r\n    })) as ArrayOfUser\r\n}\r\n\r\nexport function convertToBdUsers(reduxUsers: ArrayOfUser) {\r\n    return reduxUsers.map(reduxUser => ({\r\n        ...reduxUser,\r\n        registration: reduxUser.registration.getTime(),\r\n        lastActivity: reduxUser.lastActivity.getTime(),\r\n    })) as TBdUsers\r\n}\r\n","import { getUsers } from \"../../../controller/Engine/getters\";\r\nimport { UserActions } from \"../../../redux/actions/UserActions\";\r\n\r\nlet id = 0\r\n\r\nconst DAY = 24 * 60 * 60 * 1000\r\n\r\nexport const addUser: React.MouseEventHandler<HTMLButtonElement> = function (event) {\r\n    // UserActions.addUsers([\r\n    //     {\r\n    //         id: id,\r\n    //         registration: new Date(id++ * DAY),\r\n    //         lastActivity: new Date(),\r\n    //     },\r\n    // ])\r\n    UserActions.addUsers(getManyUsers())\r\n}\r\n\r\nfunction getManyUsers(count = 30) {\r\n    const reduxUsers = getUsers()\r\n    if (Array.isArray(reduxUsers) && reduxUsers.length > 0) {\r\n        id = reduxUsers[reduxUsers.length - 1]?.id || id\r\n    }\r\n\r\n    const users: Parameters<typeof UserActions['addUsers']>[0] = []\r\n\r\n    for (let i = 0; i < count; i++) {\r\n        users.push({\r\n            id: ++id,\r\n            registration: new Date(id * DAY),\r\n            lastActivity: new Date(),\r\n        })\r\n    }\r\n\r\n    return users\r\n}\r\n\r\n\r\n","import { store } from \"../store\";\r\nimport { REPLACE_HISTOGRAM, REPLACE_SPLINE, SET_RETENTION, TGrafReducerAction } from \"../store/reducer/grafReducer\";\r\n\r\n/** диспатчеры store.getState().graph */\r\nexport class GraphActions {\r\n    // retention\r\n\r\n    static setRetention(retention: Required<TGrafReducerAction['payload']>['retention']) {\r\n        store.dispatch({\r\n            type: SET_RETENTION,\r\n            payload: {\r\n                retention\r\n            },\r\n        })\r\n    }\r\n\r\n    // histogram\r\n\r\n    /** замена точек гистограммы */\r\n    static replaceHistogram(histogram: Required<TGrafReducerAction['payload']>['histogram']) {\r\n        store.dispatch({\r\n            type: REPLACE_HISTOGRAM,\r\n            payload: { histogram },\r\n        })\r\n    }\r\n\r\n    /** добавление точек в конец гистограммы */\r\n    static pushHistogramBins(histogramSlice: Required<TGrafReducerAction['payload']>['histogram']) {\r\n        const histogram = store.getState().graph.histogram.concat(histogramSlice)\r\n\r\n        store.dispatch({\r\n            type: REPLACE_HISTOGRAM,\r\n            payload: { histogram },\r\n        })\r\n    }\r\n\r\n    // spline\r\n\r\n    static replaceSpline(spline: Required<TGrafReducerAction['payload']>['spline']) {\r\n        store.dispatch({\r\n            type: REPLACE_SPLINE,\r\n            payload: { spline },\r\n        })\r\n    }\r\n}\r\n","import { GraphActions } from \"../redux/actions/GraphActions\";\r\nimport { getUsers } from \"./Engine/getters\";\r\n\r\nexport class Retention{\r\n\r\n    public static calcRetention() {\r\n        const retention7 = this.getRollingRetention(7)\r\n        if (Number.isFinite(retention7)) { GraphActions.setRetention(retention7) }\r\n    }\r\n\r\n    /**\r\n     * @param days Retention interval. int > 0 .\r\n     * особенность формулировки функции в том, что юзер может и регнуться X+n дней назад, и вернуться через X+(m<=n) дней.\r\n     * такие юзеры приближают функцию к 1\r\n     */\r\n    protected static getRollingRetention(days: number) {\r\n        // если вернулся в день когда регнулся, это возврат в 0 день или в 1 ?\r\n        // буду считать что это 0 день\r\n\r\n        // что считать началом дня? полночь по гринвичу или в часовом поясе клиента?\r\n        // а может лучше осчитывать интевал от момента регистрации, а не от начала дня регистрации?\r\n        // буду считать что это полночь по гринвичу\r\n\r\n        // после округления интервал будет == 0. В результате чего в оба фильтра попадут все пользователи.\r\n        // поменять если из фильтров уберут нестрогие неравентства\r\n        if (days < 1) { return 1 }\r\n\r\n        /** запрашиваемый интервал */\r\n        const intervalTime = this.floorTime(this.getIntervalTime(days))\r\n\r\n        /** начало сегодняшних суток */\r\n        const now = this.floorTime(Date.now())\r\n\r\n        let returns = 0, news = 0\r\n\r\n        const users = getUsers()\r\n        for (const user of users) {\r\n            /** начало суток в которых юзер зарегистрировался */\r\n            const registration = this.floorTime(user.registration.getTime())\r\n            // количество пользователей, зарегистрировавшихся в системе X дней назад или раньше\r\n            // это значит что расстояние между округлёнными таймстампами должно быть >= округлённого запрашиваемого интервала\r\n            if (now - registration >= intervalTime) {\r\n                news++\r\n            }\r\n\r\n            /** начало суток в которых была последняя активность юзера */\r\n            const lastActivity = this.floorTime(user.lastActivity.getTime())\r\n            // количество пользователей, вернувшихся в систему в X-ый день после регистрации или позже\r\n            // по сути та-же функция что в условии выше. Т.к. в формулировке меняется знак времени\r\n            if (lastActivity - registration >= intervalTime) {\r\n                returns++\r\n            }\r\n\r\n            // особенность формулировки функции в том, что юзер может и регнуться X+n дней назад, и вернуться через X+(m<=n) дней.\r\n            // такие юзеры приближают функцию к 1\r\n\r\n            // а ещё все \"вернувшиеся\" так-же попадают в фильтр \"новых\". Из чего следуется что результат <=1\r\n            // И это позволяет поместить второй if в первый, для чуть большей оптимизации.\r\n            // но меня смущает постановка задачи, потому такую оптимизацию стоит делать после уточнения всех вопросов что тут написал\r\n        }\r\n\r\n        // 0 / 0\r\n        if (!news) { return NaN }\r\n\r\n        return returns / news\r\n    }\r\n\r\n    private static readonly DAY = 24 * 60 * 60 * 1000\r\n    protected static getIntervalTime(days: number) {\r\n        return days * this.DAY\r\n    }\r\n    protected static floorTime(time: number) {\r\n        return time - time % this.DAY\r\n    }\r\n\r\n    /**\r\n     * @param days Retention interval. int > 0\r\n     * @deprecated\r\n     */\r\n    protected static getSimpleRollingRetention(days: number) {\r\n        if (days < 1) { return NaN }\r\n        const intervalTime = this.getIntervalTime(days)\r\n        const users = getUsers()\r\n\r\n        let returns = 0, news = 0\r\n        const now = Date.now()\r\n\r\n        for (const user of users) {\r\n            const registration = user.registration.getTime()\r\n            if (now - registration <= intervalTime) {\r\n                news++\r\n            } else if (user.lastActivity.getTime() - registration >= intervalTime) {\r\n                returns++\r\n            }\r\n        }\r\n\r\n        if (!news) { return NaN }\r\n\r\n        return returns / news\r\n    }\r\n}\r\n","import { Retention } from \"../../../controller/Retention\"\r\n\r\nexport const calculate: React.MouseEventHandler<HTMLButtonElement> = function (event) {\r\n    Retention.calcRetention()\r\n}\r\n","import React, { useState } from 'react';\r\nimport './Controls.scss';\r\nimport './button/button.scss';\r\nimport { save } from './EventHandlers/Save';\r\nimport { addUser } from './EventHandlers/AddUser';\r\nimport { calculate } from './EventHandlers/Calculate';\r\n\r\nexport const Controls: React.FC = () => {\r\n    const [loading, setLoading] = useState(false)\r\n    const saveButtonClick: React.MouseEventHandler<HTMLButtonElement> = function (event) {\r\n        setLoading(true)\r\n        save().finally(() => setLoading(false))\r\n    }\r\n\r\n    return <div\r\n        className=\"controls\"\r\n    >\r\n        <button\r\n            className='controls-button_add button'\r\n            disabled={loading}\r\n            type='button'\r\n            onClick={addUser}\r\n        >Add</button>\r\n        <button\r\n            className='controls-button_save button'\r\n            disabled={loading}\r\n            type='submit'\r\n            onClick={saveButtonClick}\r\n        >Save</button>\r\n        <button\r\n            className='controls-button_calculate button'\r\n            disabled={loading}\r\n            type='button'\r\n            onClick={calculate}\r\n        >Calculate</button>\r\n    </div>\r\n}\r\n\r\nexport default Controls\r\n","import { Engine } from \"../../../controller/Engine\"\r\n\r\nexport function save() {\r\n    return Engine.trySave()\r\n        .then(() => Engine.tryLoad())\r\n        .catch(e => console.error(e))\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { TState } from '../../../redux/store/reducer';\r\nimport './Retention.scss';\r\n\r\nexport const Retention: React.FC = () => {\r\n    const retention = useSelector((store: TState) => store.graph.retention)\r\n    if (!Number.isFinite(retention)) { return <div /> }\r\n\r\n    return <div\r\n        className=\"retention\"\r\n    >\r\n        {`Rolling Retention 7 day: ${retention}`}\r\n    </div>\r\n}\r\n\r\nexport default Retention\r\n\r\n","import React from 'react';\r\nimport './Graph.scss';\r\nimport { Retention } from './Retention/Retention';\r\n\r\nexport const Graph: React.FC = () => {\r\n    return <div\r\n        className=\"graph\"\r\n    >\r\n        <Retention />\r\n    </div>\r\n}\r\n\r\nexport default Graph\r\n\r\n","export function getHTMLDate(date: Date) {\r\n    return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`\r\n}\r\n\r\nexport function getDateFromHTML(date: string) {\r\n    const dateValues = date.trim().split('-').map(value => parseInt(value.trim()) || 0)\r\n    const newDate = new Date()\r\n    if (dateValues.length >= 3) {\r\n        newDate.setFullYear(dateValues[0])\r\n        newDate.setMonth(dateValues[1])\r\n        newDate.setDate(dateValues[2])\r\n    }\r\n    return newDate\r\n}\r\n","import React, { useState } from 'react';\r\nimport './User.scss';\r\nimport { useSelector } from 'react-redux';\r\nimport { TState } from '../../../redux/store/reducer';\r\nimport { IBasicProps } from '../../../types/reactComponents/basic';\r\nimport { getHTMLDate } from './dateParser/dateParser';\r\n\r\ninterface IUserProps extends IBasicProps{\r\n    index: number\r\n}\r\n\r\nexport const User: React.FC<IUserProps> = ({ index, requireCssClass }) => {\r\n    const user = useSelector((store: TState) => store.users[index])\r\n\r\n    const [userId, setUserId] = useState(user.id)\r\n    const [registration, setRegistration] = useState(getHTMLDate(user.registration))\r\n    const [lastActivity, setLastActivity] = useState(getHTMLDate(user.lastActivity))\r\n\r\n    if (!user) { return null }\r\n\r\n    return <tr className={requireCssClass + ' user'}>\r\n        <td className={'user-item user-item_first'}>\r\n            <input\r\n                value={userId}\r\n                name=\"userId\"\r\n                onChange={event => setUserId(+event.target.value)}\r\n                type=\"number\"\r\n                className={'user-item-input user-item-input_clear'}\r\n                size={userId.toString().length + 1}\r\n            />\r\n        </td>\r\n        <td className={'user-item'}>\r\n            <input\r\n                value={registration}\r\n                name=\"registration\"\r\n                onChange={event => setRegistration(event.target.value)}\r\n                type=\"date\"\r\n                className={'user-item-input'}\r\n            />\r\n        </td>\r\n        <td className={'user-item user-item_last'}>\r\n            <input\r\n                value={lastActivity}\r\n                name=\"lastActivity\"\r\n                onChange={event => setLastActivity(event.target.value)}\r\n                type=\"date\"\r\n                className={'user-item-input'}\r\n            />\r\n        </td>\r\n    </tr>\r\n}\r\n\r\nexport default User\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { TState } from '../../redux/store/reducer';\r\nimport './Table.scss';\r\nimport { User } from './User/User';\r\n\r\nexport const Table: React.FC = () => {\r\n    const users = useSelector((store: TState) => store.users, (left, right) => left.length === right.length)\r\n\r\n    return <table className=\"table\">\r\n        <caption className=\"table-caption\">Users activity</caption>\r\n        <thead className=\"table-head\">\r\n            <tr>\r\n                <th className=\"table-head-item\" scope=\"col\">UserID</th>\r\n                <th className=\"table-head-item\" scope=\"col\">Date Registration</th>\r\n                <th className=\"table-head-item\" scope=\"col\">Date Last Activity</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody className={\"table-body\"}>{\r\n            users.map((user, index) => <User\r\n                requireCssClass='table-body-item'\r\n                index={index}\r\n                key={`table-${index}-${user.id}`}\r\n            />)\r\n        }</tbody>\r\n    </table>\r\n}\r\n\r\nexport default Table\r\n\r\n","import React from 'react';\r\nimport './App.scss';\r\nimport { Controls } from './Controls/Controls';\r\nimport { Graph } from './Graph/Graph';\r\nimport { Table } from './Table/Table';\r\n\r\nexport const App: React.FC = () => {\r\n  return <div className=\"app\">\r\n    <div className=\"app-data\">\r\n      <Table />\r\n      <Graph />\r\n    </div>\r\n    <Controls />\r\n  </div>\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './redux/store';\r\nimport { Engine } from './controller/Engine';\r\n\r\nEngine.init()\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>,\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}